// Generated by CoffeeScript 1.12.7
(function() {
  var InvoiceListCtrl,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  InvoiceListCtrl = (function(superClass) {
    var result;

    extend(InvoiceListCtrl, superClass);

    function InvoiceListCtrl() {
      return InvoiceListCtrl.__super__.constructor.apply(this, arguments);
    }

    result = null;

    InvoiceListCtrl.prototype.events = {
      "load article#list-invoices": "loadListInvoices",
      "singleTap a[data-action=new]": "addInvoice"
    };

    InvoiceListCtrl.prototype.elements = {
      "#list-invoices": "listInvoices",
      "header a[href=\\#]": "header",
      "a[data-action=new]": "new"
    };

    InvoiceListCtrl.prototype.setResult = function(res) {
      return result = null;
    };

    InvoiceListCtrl.prototype.onPrevius = function(event) {
      return this.change(event, -1);
    };

    InvoiceListCtrl.prototype.onNext = function(event) {
      return this.change(event, 1);
    };

    InvoiceListCtrl.prototype.change = function(event, delta) {
      var a, newDayAux, oneWeek, selectedDate;
      selectedDate = __FacadeCore.Cache_get(appName + "selectedDateDiary");
      a = selectedDate.split('-');
      newDayAux = new Date(a[0], a[1] - 1, a[2]);
      oneWeek = 1000 * 60 * 60 * 24 * 7;
      newDayAux.setTime(newDayAux.getTime() + (delta * oneWeek));
      selectedDate = dateToString(newDayAux);
      __FacadeCore.Cache_remove(appName + "selectedDateDiary");
      __FacadeCore.Cache_set(appName + "selectedDateDiary", selectedDate);
      result = null;
      return this.loadListInvoicesWeek(event);
    };

    InvoiceListCtrl.prototype.loadListInvoices = function(event) {
      var newDayAux, selectedDate;
      this.header.hide();
      this["new"].show();
      selectedDate = __FacadeCore.Cache_get(appName + "selectedDateDiary");
      if (!selectedDate) {
        newDayAux = new Date();
        selectedDate = dateToString(newDayAux);
        __FacadeCore.Cache_remove(appName + "selectedDateDiary");
        __FacadeCore.Cache_set(appName + "selectedDateDiary", selectedDate);
      }
      result = null;
      return this.loadListInvoicesWeek(event);
    };

    InvoiceListCtrl.prototype.loadListInvoicesWeek = function(event) {
      var _this, a, data, dayFirstWeek, dayWeek, local, newDay, oneDay, selectedDate, selectedDateFirstWeek, url;
      Lungo.Element.loading("#list-invoices ul", "black");
      selectedDate = __FacadeCore.Cache_get(appName + "selectedDateDiary");
      a = selectedDate.split('-');
      newDay = new Date(a[0], a[1] - 1, a[2]);
      dayWeek = newDay.getDay();
      if (dayWeek === 0) {
        dayWeek = 6;
      } else {
        dayWeek = dayWeek - 1;
      }
      oneDay = 1000 * 60 * 60 * 24;
      dayFirstWeek = new Date();
      dayFirstWeek.setTime(newDay.getTime() - (dayWeek * oneDay));
      if (!result) {
        selectedDateFirstWeek = dateToString(dayFirstWeek);
        url = "http://" + appHost + "/invoice/operator/listByDiary";
        local = __FacadeCore.Cache_get(appName + "local");
        data = {
          localId: local.id,
          selectedDate: selectedDateFirstWeek.toString()
        };
        _this = this;
        return $$.json(url, data, function(response) {
          return _this.showListInvoices(response, newDay, dayFirstWeek);
        });
      } else {
        return this.showListInvoices(null, newDay, dayFirstWeek);
      }
    };

    InvoiceListCtrl.prototype.showListInvoices = function(response, daySelect, dayFirstWeek) {
      var dateDay, dateDayAnt, dateDaySelect, dateHour, i, invRateDay, invoice, invoiceAux, invoiceMov, j, k, len, len1, local, oneDay, ratesListDay, textsTemplates, view;
      local = __FacadeCore.Cache_get(appName + "local");
      if (!result) {
        result = Lungo.Core.toArray(response);
        result = Lungo.Core.orderByProperty(result, "invTime", "asc");
      }
      dateDayAnt = "";
      invRateDay = 0;
      ratesListDay = [];
      i = 0;
      for (j = 0, len = result.length; j < len; j++) {
        invoiceAux = result[j];
        dateHour = new Date(invoiceAux.invTime);
        dateDay = dateToStringFormat(dateHour);
        if (dateDay !== dateDayAnt && dateDayAnt !== "") {
          ratesListDay[i] = invRateDay;
          invRateDay = 0;
          i++;
        }
        invRateDay += invoiceAux.invRate;
        dateDayAnt = dateDay;
      }
      ratesListDay[i] = invRateDay;
      this.listInvoices.children().empty();
      textsTemplates = {
        displayUntil: findLangTextElement("label.template.displayUntil"),
        pressDisplayMore: findLangTextElement("label.template.pressDisplayMore")
      };
      invoiceMov = new __Model.Invoice({
        eveDay: dateToStringFormat(dayFirstWeek),
        texts: textsTemplates
      });
      view = new __View.InvoiceListFromView({
        model: invoiceMov
      });
      view.append(invoiceMov);
      dateDaySelect = dateToStringFormat(daySelect);
      dateDayAnt = "";
      textsTemplates = {
        pressDisplay: findLangTextElement("label.template.pressDisplay"),
        finished: findLangTextElement("label.template.finished"),
        currency: local.locWhere.wheCurrency
      };
      i = 0;
      for (k = 0, len1 = result.length; k < len1; k++) {
        invoiceAux = result[k];
        dateHour = new Date(invoiceAux.invTime);
        dateDay = dateToStringFormat(dateHour);
        invoice = new __Model.Invoice({
          invId: invoiceAux.id,
          invTime: invoiceAux.invTime,
          eveDay: dateDay,
          eveHour: dateToStringHour(dateHour),
          invClient: invoiceAux.invClient,
          invDesc: invoiceAux.invDesc,
          enabled: true,
          invRate: parseFloat(invoiceAux.invRate).toFixed(2),
          invBilleds: invoiceAux.invBilleds,
          texts: textsTemplates
        });
        if (dateDay !== dateDayAnt) {
          invoice.invRateDay = parseFloat(ratesListDay[i]).toFixed(2);
          view = new __View.InvoiceListDayView({
            model: invoice
          });
          view.append(invoice);
          i++;
        }
        if (dateDay === dateDaySelect) {
          invoice.texts = textsTemplates;
          view = new __View.InvoiceListView({
            model: invoice
          });
          view.append(invoice);
        }
        dateDayAnt = dateDay;
      }
      oneDay = 1000 * 60 * 60 * 24;
      dayFirstWeek.setTime(dayFirstWeek.getTime() + (6 * oneDay));
      textsTemplates = {
        displayFrom: findLangTextElement("label.template.displayFrom"),
        pressDisplayMore: findLangTextElement("label.template.pressDisplayMore")
      };
      invoiceMov = new __Model.Invoice({
        eveDay: dateToStringFormat(dayFirstWeek),
        texts: textsTemplates
      });
      view = new __View.InvoiceListUntilView({
        model: invoiceMov
      });
      return view.append(invoiceMov);
    };

    InvoiceListCtrl.prototype.addInvoice = function(event) {
      return __FacadeCore.Router_section("newInvoice");
    };

    return InvoiceListCtrl;

  })(Monocle.Controller);

  __Controller.InvoiceList = new InvoiceListCtrl("section#booking");

}).call(this);
