// Generated by CoffeeScript 1.12.7
(function() {
  var InvoiceTaskSelectCtrl,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  InvoiceTaskSelectCtrl = (function(superClass) {
    extend(InvoiceTaskSelectCtrl, superClass);

    function InvoiceTaskSelectCtrl() {
      return InvoiceTaskSelectCtrl.__super__.constructor.apply(this, arguments);
    }

    InvoiceTaskSelectCtrl.prototype.events = {
      "load #invoiceTaskSelect-form": "loadLocalTaskInv",
      "singleTap a[data-action=cancel]": "onCancel",
      "change #lotSelect": "changeSelectTask"
    };

    InvoiceTaskSelectCtrl.prototype.elements = {
      "#invoiceTaskSelect-form": "listArt",
      "a[data-action=save]": "buttonSave",
      "a[data-action=cancel]": "buttonCancel",
      "a[data-action=new]": "buttonNew",
      "a[data-action=newPro]": "buttonNewProduct"
    };

    InvoiceTaskSelectCtrl.prototype.changeSelectTask = function(event) {
      var selectTask;
      console.log("changeSelectTask");
      selectTask = Lungo.dom("#invoiceTaskSelect-form #lotSelect");
      return this.loadLocalTaskInv(event, parseInt(selectTask.val()));
    };

    InvoiceTaskSelectCtrl.prototype.loadLocalTaskInv = function(event, taskIdSelect) {
      var i, j, k, l, len, len1, len2, local, localTask, localTaskAux, lotEnabled, productAux, products, results, results1, selectTask, selectedTasksBil, selectedTasksBilNum, selectedTasksBilType, simpleLocalTasks, task, taskOption, tasks, texts, textsTemplates, view;
      this.buttonSave.hide();
      this.buttonNew.hide();
      this.buttonNewProduct.hide();
      Lungo.Element.loading("#invoiceTaskSelect-form ul", "black");
      simpleLocalTasks = __FacadeCore.Cache_get(appName + "simpleLocalTasks");
      products = __FacadeCore.Cache_get(appName + "products");
      this.listArt.children().empty();
      selectedTasksBilNum = __FacadeCore.Cache_get(appName + "selectedTasksBilNum");
      selectedTasksBilType = __FacadeCore.Cache_get(appName + "selectedTasksBilType");
      selectedTasksBil = __FacadeCore.Cache_get(appName + "bilTaskId" + selectedTasksBilNum);
      local = __FacadeCore.Cache_get(appName + "local");
      if (selectedTasksBilType === 0) {
        texts = {
          cabText: findLangTextElement("billed.selectTask") + " " + selectedTasksBilNum
        };
      } else {
        texts = {
          cabText: findLangTextElement("billed.selectProduct") + " " + selectedTasksBilNum
        };
      }
      view = new __View.ListCabView({
        model: texts,
        container: "section#newInvoice article#invoiceTaskSelect-form ul"
      });
      view.append(texts);
      if (selectedTasksBilType === 0) {
        textsTemplates = {
          selectTask: findLangTextElement("localTask.selectSystemTask")
        };
        view = new __View.LocalTaskInvSelectView({
          model: textsTemplates
        });
        view.append(textsTemplates);
        tasks = __FacadeCore.Cache_get(appName + "tasks");
        i = -1;
        taskOption = 0;
        selectTask = Lungo.dom("#invoiceTaskSelect-form #lotSelect");
        if (!taskIdSelect) {
          taskIdSelect = selectedTasksBil.lotTaskId;
        }
        for (j = 0, len = tasks.length; j < len; j++) {
          task = tasks[j];
          i++;
          selectTask[0].options[i] = new Option(task.tasName, task.id);
          if (taskIdSelect === task.id) {
            taskOption = i;
          }
          selectTask[0].options.selectedIndex = taskOption;
        }
        textsTemplates = {
          currency: local.locWhere.wheCurrency
        };
        results = [];
        for (k = 0, len1 = simpleLocalTasks.length; k < len1; k++) {
          localTaskAux = simpleLocalTasks[k];
          if (parseInt(selectTask.val()) === localTaskAux.lotTaskId) {
            lotEnabled = false;
            if (selectedTasksBil.id === localTaskAux.id || selectedTasksBil.lotId === localTaskAux.id) {
              lotEnabled = true;
            }
            localTask = new __Model.LocalTask({
              enabled: lotEnabled,
              lotId: localTaskAux.id,
              lotTaskRate: localTaskAux.lotTaskRate,
              lotName: localTaskAux.lotName,
              lotTaskId: localTaskAux.lotTaskId,
              texts: textsTemplates
            });
            view = new __View.LocalTaskInvView({
              model: localTask
            });
            results.push(view.append(localTask));
          } else {
            results.push(void 0);
          }
        }
        return results;
      } else {
        textsTemplates = {
          currency: local.locWhere.wheCurrency
        };
        results1 = [];
        for (l = 0, len2 = products.length; l < len2; l++) {
          productAux = products[l];
          lotEnabled = false;
          if (selectedTasksBil.id === productAux.id) {
            lotEnabled = true;
          }
          localTask = new __Model.LocalTask({
            enabled: lotEnabled,
            lotId: productAux.id,
            lotTaskRate: productAux.proRate,
            lotName: productAux.proName,
            texts: textsTemplates
          });
          view = new __View.LocalTaskInvView({
            model: localTask
          });
          results1.push(view.append(localTask));
        }
        return results1;
      }
    };

    InvoiceTaskSelectCtrl.prototype.onCancel = function(event) {
      if (this.listArt.hasClass("active")) {
        __FacadeCore.Cache_remove(appName + "selectedTasksBilNum");
        __FacadeCore.Cache_remove(appName + "selectedTasksBilType");
        return __FacadeCore.Router_article("newInvoice", "invoice-form");
      }
    };

    return InvoiceTaskSelectCtrl;

  })(Monocle.Controller);

  __Controller.InvoiceTaskSelect = new InvoiceTaskSelectCtrl("section#newInvoice");

}).call(this);
