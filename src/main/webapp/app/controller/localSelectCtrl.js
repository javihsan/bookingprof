// Generated by CoffeeScript 1.12.7
(function() {
  var LocalSelectCtrl,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  LocalSelectCtrl = (function(superClass) {
    extend(LocalSelectCtrl, superClass);

    function LocalSelectCtrl() {
      return LocalSelectCtrl.__super__.constructor.apply(this, arguments);
    }

    LocalSelectCtrl.prototype.events = {
      "load article#list-local": "loadLocal"
    };

    LocalSelectCtrl.prototype.elements = {
      "#list-local": "listLocal",
      "header a[href=\\#]": "header",
      "footer a": "footer",
      "header a[href=\\#menu]": "aside",
      "#header_text": "headerText"
    };

    LocalSelectCtrl.prototype.loadLocal = function(event) {
      var _this, asyn, data, firm, localId, url;
      this.header.hide();
      this.footer.hide();
      asyn = __FacadeCore.Service_Settings_asyncFalse();
      url = "http://" + appHost + "/firm/get";
      data = {
        domain: appFirmDomain
      };
      firm = $$.json(url, data);
      __FacadeCore.Service_Settings_async(asyn);
      localId = __FacadeCore.Storage_get(appName + "localId");
      if (!localId) {
        this.aside.hide();
        this.headerText.html(firm.firName + " - " + findLangTextElement("local.select.cabText"));
      }
      Lungo.Element.loading("#list-local ul", "black");
      data = {
        domain: appFirmDomain
      };
      _this = this;
      return $$.json(urlListLocalAll, data, function(response) {
        return _this.showLocal(response);
      });
    };

    LocalSelectCtrl.prototype.showLocal = function(response) {
      var i, len, local, localAux, localMod, result, results, selectLocal, texts, view;
      if (response.length > 0) {
        result = Lungo.Core.toArray(response);
        result = Lungo.Core.orderByProperty(result, "locName", "asc");
        this.listLocal.children().empty();
        texts = {
          cabText: findLangTextElement("label.aside.locals")
        };
        view = new __View.ListCabView({
          model: texts,
          container: "section#booking article#list-local ul"
        });
        view.append(texts);
        local = __FacadeCore.Cache_get(appName + "local");
        results = [];
        for (i = 0, len = result.length; i < len; i++) {
          localAux = result[i];
          selectLocal = false;
          if (local && localAux.id === local.id) {
            selectLocal = true;
          }
          localMod = new __Model.Local({
            enabled: true,
            locId: localAux.id,
            locSelect: selectLocal,
            locName: localAux.locName,
            locLocation: localAux.locWhere.wheAddress
          });
          view = new __View.LocalSelectView({
            model: localMod
          });
          results.push(view.append(localMod));
        }
        return results;
      } else {
        this.listLocal.children().empty();
        texts = {
          cabText: findLangTextElement("label.aside.locals")
        };
        view = new __View.ListCabView({
          model: texts,
          container: "section#booking article#list-local ul"
        });
        view.append(texts);
        return Lungo.Notification.success(findLangTextElement("label.notification.noData.title"), findLangTextElement("label.notification.noData.text"), null, 3);
      }
    };

    return LocalSelectCtrl;

  })(Monocle.Controller);

  __Controller.LocalSelect = new LocalSelectCtrl("section#booking");

}).call(this);
