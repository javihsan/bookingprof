// Generated by CoffeeScript 1.12.7
(function() {
  var EventNewCtrl,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  EventNewCtrl = (function(superClass) {
    var conserveData;

    extend(EventNewCtrl, superClass);

    function EventNewCtrl() {
      return EventNewCtrl.__super__.constructor.apply(this, arguments);
    }

    conserveData = false;

    EventNewCtrl.prototype.events = {
      "singleTap a[data-action=save]": "onSave",
      "singleTap a[data-action=cancel]": "onCancel",
      "singleTap a[data-action=search-client]": "onSearchClient",
      "load #newEvent": "loadNew",
      "unload #newEvent": "unloadNew",
      "change #eveClientNew": "changeEveClientNew",
      "change #eveClientEmail": "changeCliEmail"
    };

    EventNewCtrl.prototype.elements = {
      "#event_hour": "eventHour",
      "#eveTime": "eveTime",
      "#error_eveTime": "error_eveTime",
      "#eveClientEmail": "eveClientEmail",
      "#error_eveClientEmail": "error_eveClientEmail",
      "#eveClientName": "eveClientName",
      "#error_eveClientName": "error_eveClientName",
      "#eveClientTelf": "eveClientTelf",
      "#error_eveClientTelf": "error_eveClientTelf",
      "#eveDescAlega": "eveDescAlega",
      "a[data-action=save]": "buttonSave",
      "a[data-action=cancel]": "buttonCancel",
      "#eveClientNew": "eveClientNew",
      "#searchLi": "buttonSearch"
    };

    EventNewCtrl.prototype.changeCliEmail = function(event) {
      var asyn, data, eveClient, url;
      if (this.eveTime[0] && this.eveClientEmail.val().length > 0) {
        asyn = __FacadeCore.Service_Settings_asyncFalse();
        url = "http://" + appHost + "/client/operator/listByEmail";
        data = {
          domain: appFirmDomain,
          email: this.eveClientEmail.val()
        };
        eveClient = $$.json(url, data);
        __FacadeCore.Service_Settings_async(asyn);
        if (eveClient && this.eveClientNew.val() === "1") {
          this.eveClientNew[0].options[1].selected = true;
          Lungo.Notification.success(findLangTextElement("label.notification.existsClient.title"), findLangTextElement("label.notification.existsClient.text"), null, 3);
          eveClient.cliId = eveClient.id;
          this.eveClientName.val(eveClient.whoName);
          if (eveClient.whoTelf1) {
            this.eveClientTelf.val(eveClient.whoTelf1);
          } else if (eveClient.whoTelf2) {
            this.eveClientTelf.val(eveClient.whoTelf2);
          }
          this.changeEveClientNew(event);
          __FacadeCore.Cache_remove(appName + "selectClient");
          __FacadeCore.Cache_set(appName + "selectClient", eveClient);
          return false;
        }
      }
      return true;
    };

    EventNewCtrl.prototype.onSearchClient = function(event) {
      conserveData = true;
      __FacadeCore.Cache_remove(appName + "routerSearchClient");
      __FacadeCore.Cache_set(appName + "routerSearchClient", "newEvent");
      return __FacadeCore.Router_article("searchClient", "search-clients");
    };

    EventNewCtrl.prototype.changeEveClientNew = function(event) {
      if (this.eveClientNew.val() === "1") {
        this.eveClientName[0].disabled = false;
        this.eveClientEmail[0].disabled = false;
        this.eveClientTelf[0].disabled = false;
        this.buttonSearch.hide();
      } else {
        this.eveClientName[0].disabled = true;
        this.eveClientEmail[0].disabled = true;
        this.eveClientTelf[0].disabled = true;
        this.buttonSearch.show();
      }
      if (this.eveTime[0]) {
        this.error_eveTime.html("");
      }
      this.error_eveClientEmail.html("");
      this.error_eveClientName.html("");
      return this.error_eveClientTelf.html("");
    };

    EventNewCtrl.prototype.onSave = function(event) {
      var _this, a, appointment, calendarSel, data, eveClient, h, i, j, len, len1, local, selectCalendarsParam, selectTaskParam, selectedCalendars, selectedTasks, selectedTasksCount, startTime, taskSel;
      if (this.buttonSave.html().indexOf("Ok") !== -1 && this.validateForm() && this.changeCliEmail(event)) {
        __FacadeCore.Cache_remove(appName + "elementSave");
        __FacadeCore.Cache_remove(appName + "elementCancel");
        __FacadeCore.Cache_set(appName + "elementSave", this.buttonSave.html());
        __FacadeCore.Cache_set(appName + "elementCancel", this.buttonCancel.html());
        Lungo.Element.loading(this.buttonSave.selector, "black");
        Lungo.Element.loading(this.buttonCancel.selector, "black");
        local = __FacadeCore.Cache_get(appName + "local");
        appointment = __FacadeCore.Cache_get(appName + "newApo");
        startTime = appointment.apoStartTime;
        if (this.eveTime[0]) {
          a = this.eveTime.val().split(':');
          startTime = new Date(startTime);
          startTime.setUTCHours(a[0]);
          startTime.setUTCMinutes(a[1]);
          startTime = startTime.getTime();
          if (this.eveClientNew.val() === "0") {
            eveClient = __FacadeCore.Cache_get(appName + "selectClient");
          }
        }
        data = {
          eveDescAlega: this.eveDescAlega.val(),
          localId: local.id,
          eveStartTime: startTime
        };
        if (eveClient) {
          data.cliId = eveClient.cliId;
        } else {
          data.cliName = this.eveClientName.val();
          data.cliEmail = this.eveClientEmail.val();
          data.cliTelf = this.eveClientTelf.val();
        }
        selectedTasks = __FacadeCore.Cache_get(appName + "selectedTasks");
        selectTaskParam = new Array();
        h = 0;
        for (i = 0, len = selectedTasks.length; i < len; i++) {
          taskSel = selectedTasks[i];
          selectTaskParam[h] = taskSel.id;
          h++;
        }
        data.selectedTasks = selectTaskParam;
        selectedTasksCount = __FacadeCore.Cache_get(appName + "selectedTasksCount");
        data.selectedTasksCount = selectedTasksCount;
        selectedCalendars = __FacadeCore.Cache_get(appName + "selectedCalendars");
        selectCalendarsParam = new Array();
        if (selectedCalendars) {
          h = 0;
          for (j = 0, len1 = selectedCalendars.length; j < len1; j++) {
            calendarSel = selectedCalendars[j];
            selectCalendarsParam[h] = calendarSel.id;
            h++;
          }
        }
        data.selectedCalendars = selectCalendarsParam;
        if (selectedTasks[0].numLines) {
          data.numLines = selectedTasks[0].numLines;
          data.numPallets = selectedTasks[0].numPallets;
        }
        _this = this;
        return $$.post(urlEventNew, data, function(response) {
          if (_this.eveTime[0]) {
            return Lungo.Notification.success(findLangTextElement("label.notification.bookedApoAdmin.title"), findLangTextElement("label.notification.bookedApoAdmin.text"), null, 3, function(response) {
              _this.resetArticle();
              return __FacadeCore.Router_article("booking", "table-month");
            });
          } else {
            __FacadeCore.Storage_set(appName + "eveClient", null);
            __FacadeCore.Storage_set(appName + "eveClient", data);
            return Lungo.Notification.success(findLangTextElement("label.notification.bookedApo.title"), findLangTextElement("label.notification.bookedApo.text"), null, 3, function(response) {
              _this.resetArticle();
              return __FacadeCore.Router_article("booking", "table-month");
            });
          }
        });
      }
    };

    EventNewCtrl.prototype.validateForm = function() {
      var result;
      result = true;
      if (this.eveTime[0]) {
        this.error_eveTime.html("");
      }
      this.error_eveClientEmail.html("");
      this.error_eveClientName.html("");
      this.error_eveClientTelf.html("");
      if (this.eveTime[0] && !this.eveTime[0].checkValidity()) {
        this.error_eveTime.html(getMessageValidity(this.eveTime[0]));
        this.eveTime[0].focus();
        result = false;
      } else if ((this.eveClientName[0].disabled && !checkValidity(this.eveClientName.val(), this.eveClientName.attr("pattern"), this.eveClientName.attr("required"))) || (!this.eveClientName[0].disabled && !this.eveClientName[0].checkValidity())) {
        this.error_eveClientName.html(getMessageValidity(this.eveClientName[0]));
        this.eveClientName[0].focus();
        result = false;
      } else if (!this.eveClientEmail[0].checkValidity()) {
        this.error_eveClientEmail.html(getMessageValidity(this.eveClientEmail[0]));
        this.eveClientEmail[0].focus();
        result = false;
      } else if (!checkValidity(this.eveClientTelf.val(), this.eveClientTelf.attr("pattern"), this.eveClientTelf.attr("required"))) {
        this.error_eveClientTelf.html(getMessageValidity(this.eveClientTelf[0]));
        this.eveClientTelf[0].focus();
        result = false;
      }
      return result;
    };

    EventNewCtrl.prototype.onCancel = function(event) {
      __FacadeCore.Cache_remove(appName + "elementSave");
      __FacadeCore.Cache_remove(appName + "elementCancel");
      __FacadeCore.Cache_set(appName + "elementSave", this.buttonSave.html());
      __FacadeCore.Cache_set(appName + "elementCancel", this.buttonCancel.html());
      Lungo.Element.loading(this.buttonSave.selector, "black");
      Lungo.Element.loading(this.buttonCancel.selector, "black");
      this.resetArticle();
      if (this.eveTime[0]) {
        return __FacadeCore.Router_article("taskSelect", "task-form");
      } else {
        return __FacadeCore.Router_article("booking", "table-day");
      }
    };

    EventNewCtrl.prototype.resetArticle = function() {
      this.buttonSave.html(__FacadeCore.Cache_get(appName + "elementSave"));
      this.buttonCancel.html(__FacadeCore.Cache_get(appName + "elementCancel"));
      this.eveClientName.val("");
      this.eveClientEmail.val("");
      this.eveClientTelf.val("");
      this.eveDescAlega.val("");
      if (this.eveTime[0]) {
        this.eveTime.val("");
        this.error_eveTime.html("");
        this.eveClientNew[0].options[0].selected = true;
        this.eveClientName[0].disabled = false;
        this.eveClientEmail[0].disabled = false;
        this.eveClientTelf[0].disabled = false;
        this.buttonSearch.hide();
      }
      this.error_eveClientEmail.html("");
      this.error_eveClientName.html("");
      return this.error_eveClientTelf.html("");
    };

    EventNewCtrl.prototype.unloadNew = function(event) {
      var local;
      if (!conserveData) {
        __FacadeCore.Cache_remove(appName + "newApo");
        local = __FacadeCore.Cache_get(appName + "local");
        if (local.locCacheTasks !== 1) {
          __FacadeCore.Cache_remove(appName + "selectedTasks");
          __FacadeCore.Cache_remove(appName + "selectedTasksCount");
          __FacadeCore.Cache_remove(appName + "selectedCalendars");
        }
      }
      return __FacadeCore.Cache_remove(appName + "selectClient");
    };

    EventNewCtrl.prototype.loadNew = function(event) {
      var appointment, calendarSel, dateHour, eveClient, hourApo, i, j, len, len1, local, selectedCalendars, selectedTasks, selectedTasksCount, strDateHour, strTasks, taskSel;
      conserveData = false;
      appointment = __FacadeCore.Cache_get(appName + "newApo");
      local = __FacadeCore.Cache_get(appName + "local");
      selectedCalendars = __FacadeCore.Cache_get(appName + "selectedCalendars");
      dateHour = new Date(appointment.apoStartTime);
      strDateHour = dateToStringHour(dateHour);
      hourApo = dateToStringFormat(dateHour) + " " + strDateHour;
      selectedTasks = __FacadeCore.Cache_get(appName + "selectedTasks");
      selectedTasksCount = __FacadeCore.Cache_get(appName + "selectedTasksCount");
      strTasks = " . ";
      if (selectedTasks[0].numLines) {
        strTasks += findLangTextElement("label.template.numLines") + ": " + selectedTasks[0].numLines;
        strTasks += " - " + findLangTextElement("label.template.numPallets") + ": " + selectedTasks[0].numPallets;
      } else {
        if (local.locNumPersonsApo > 1) {
          strTasks += selectedTasksCount.length + " " + findLangTextElement("label.html.apoFor2");
          strTasks += ": ";
        }
        for (i = 0, len = selectedTasks.length; i < len; i++) {
          taskSel = selectedTasks[i];
          if (local.locMulServices === 1) {
            strTasks += " 1 ";
          }
          strTasks += taskSel.tasName;
        }
      }
      if (selectedCalendars) {
        strTasks += ".";
        for (j = 0, len1 = selectedCalendars.length; j < len1; j++) {
          calendarSel = selectedCalendars[j];
          strTasks += " " + calendarSel.name;
        }
      }
      this.eventHour.html(hourApo + strTasks);
      if (this.eveTime[0]) {
        if (this.eveTime.val().length === 0) {
          this.eveTime.val(strDateHour);
        }
        eveClient = __FacadeCore.Cache_get(appName + "selectClient");
      } else {
        eveClient = __FacadeCore.Cache_get(appName + "clientSession");
        if (!eveClient) {
          eveClient = __FacadeCore.Storage_get(appName + "eveClient");
        }
      }
      if (eveClient) {
        this.eveClientName.val(eveClient.cliName);
        this.eveClientEmail.val(eveClient.cliEmail);
        if (eveClient.cliTelf) {
          this.eveClientTelf.val(eveClient.cliTelf);
        } else if (eveClient.cliTelf1) {
          this.eveClientTelf.val(eveClient.cliTelf1);
        } else if (eveClient.cliTelf2) {
          this.eveClientTelf.val(eveClient.cliTelf2);
        }
      }
      this.error_eveClientEmail.html("");
      this.error_eveClientName.html("");
      this.error_eveClientTelf.html("");
      if (appFirmDomain === 'adveo') {
        this.eveClientNew.val("0");
        if (this.eveTime[0]) {
          this.eveClientNew.parent().parent().hide();
        }
        return this.changeEveClientNew(event);
      } else if (this.eveTime[0] && local.locNewClientDefault === 0) {
        this.eveClientNew.val("0");
        return this.changeEveClientNew(event);
      }
    };

    return EventNewCtrl;

  })(Monocle.Controller);

  __Controller.EventNew = new EventNewCtrl("section#newEvent");

}).call(this);
