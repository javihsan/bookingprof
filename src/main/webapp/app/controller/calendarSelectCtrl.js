// Generated by CoffeeScript 1.12.7
(function() {
  var CalendarSelectCtrl,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  CalendarSelectCtrl = (function(superClass) {
    extend(CalendarSelectCtrl, superClass);

    function CalendarSelectCtrl() {
      return CalendarSelectCtrl.__super__.constructor.apply(this, arguments);
    }

    CalendarSelectCtrl.prototype.events = {
      "load #calendarDiarySelect": "loadCalendar",
      "singleTap a[data-action=save]": "onSave",
      "singleTap a[data-action=cancel]": "onCancel",
      "singleTap a[data-action=all]": "onAll"
    };

    CalendarSelectCtrl.prototype.elements = {
      "#calendarDiary-form": "listArt",
      "a[data-action=save]": "buttonSave",
      "a[data-action=cancel]": "buttonCancel"
    };

    CalendarSelectCtrl.prototype.loadCalendar = function(event) {
      var _this, data, local, url;
      Lungo.Element.loading("#calendarDiary-form ul", "black");
      url = "http://" + appHost + "/calendar/operator/listDiary";
      local = __FacadeCore.Cache_get(appName + "local");
      data = {
        localId: local.id
      };
      _this = this;
      return $$.json(url, data, function(response) {
        return _this.showCalendar(response);
      });
    };

    CalendarSelectCtrl.prototype.showCalendar = function(response) {
      var calEnabled, calendar, calendarAux, h, j, k, len, ref, result, results, selectCalendar, texts, view;
      if (response.length > 0) {
        result = Lungo.Core.toArray(response);
        result = Lungo.Core.orderByProperty(result, "calName", "asc");
        this.listArt.children().empty();
        texts = {
          cabText: findLangTextElement("place.select.cabText")
        };
        view = new __View.ListCabView({
          model: texts,
          container: "section#calendarDiarySelect article#calendarDiary-form ul"
        });
        view.append(texts);
        selectCalendar = __FacadeCore.Cache_get(appName + "selectCalendarDiary");
        results = [];
        for (j = 0, len = result.length; j < len; j++) {
          calendarAux = result[j];
          calEnabled = false;
          if (selectCalendar) {
            for (h = k = 0, ref = selectCalendar.length - 1; 0 <= ref ? k <= ref : k >= ref; h = 0 <= ref ? ++k : --k) {
              if (selectCalendar[h] === calendarAux.id) {
                calEnabled = true;
                break;
              }
            }
          } else {
            calEnabled = true;
          }
          calendar = new __Model.Calendar({
            enabled: calEnabled,
            calId: calendarAux.id,
            calLocalId: calendarAux.calLocalId,
            calName: calendarAux.calName,
            calDesc: calendarAux.calDesc
          });
          view = new __View.CalendarSelectView({
            model: calendar
          });
          results.push(view.append(calendar));
        }
        return results;
      } else {
        this.listArt.children().empty();
        texts = {
          cabText: findLangTextElement("place.select.cabText")
        };
        view = new __View.ListCabView({
          model: texts,
          container: "section#calendarDiarySelect article#calendarDiary-form ul"
        });
        view.append(texts);
        return Lungo.Notification.success(findLangTextElement("label.notification.noData.title"), findLangTextElement("label.notification.noData.text"), null, 3);
      }
    };

    CalendarSelectCtrl.prototype.onSave = function(event) {
      var h, i, j, liCalendar, listCalendar, ref, selectCalendar;
      listCalendar = $$("#calendarDiary-form ul li");
      selectCalendar = new Array();
      i = -1;
      for (h = j = 1, ref = listCalendar.length - 1; 1 <= ref ? j <= ref : j >= ref; h = 1 <= ref ? ++j : --j) {
        liCalendar = $$(listCalendar[h]);
        if (liCalendar.hasClass("accept")) {
          i++;
          selectCalendar[i] = parseInt(liCalendar.attr("calId"));
        }
      }
      if (selectCalendar.length > 0) {
        __FacadeCore.Cache_remove(appName + "selectCalendarDiary");
        __FacadeCore.Cache_set(appName + "selectCalendarDiary", selectCalendar);
        return __FacadeCore.Router_article("booking", "list-events");
      } else {
        return Lungo.Notification.error(findLangTextElement("label.notification.placeSelectOne.title"), findLangTextElement("label.notification.placeSelectOne.text"), null, 2);
      }
    };

    CalendarSelectCtrl.prototype.onCancel = function(event) {
      return __FacadeCore.Router_back();
    };

    CalendarSelectCtrl.prototype.onAll = function(event) {
      var h, j, liCalendar, listCalendar, ref, results;
      listCalendar = $$("#calendarDiary-form ul li");
      results = [];
      for (h = j = 1, ref = listCalendar.length - 1; 1 <= ref ? j <= ref : j >= ref; h = 1 <= ref ? ++j : --j) {
        liCalendar = $$(listCalendar[h]);
        if (!liCalendar.hasClass("accept")) {
          liCalendar.removeClass("cancel");
          results.push(liCalendar.addClass("accept theme"));
        } else {
          results.push(void 0);
        }
      }
      return results;
    };

    return CalendarSelectCtrl;

  })(Monocle.Controller);

  __Controller.CalendarSelect = new CalendarSelectCtrl("section#calendarDiarySelect");

}).call(this);
