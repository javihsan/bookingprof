// Generated by CoffeeScript 1.12.7
(function() {
  var BookingHoursCtrl,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  BookingHoursCtrl = (function(superClass) {
    extend(BookingHoursCtrl, superClass);

    function BookingHoursCtrl() {
      return BookingHoursCtrl.__super__.constructor.apply(this, arguments);
    }

    BookingHoursCtrl.prototype.events = {
      "load section#booking-hours": "loadHours",
      "singleTap a[data-action=today]": "onToday",
      "singleTap article#hours td": "onSelectDay",
      "doubleTap article#hours td": "onCloseDay",
      "singleTap a[data-action=return]": "onReturn"
    };

    BookingHoursCtrl.prototype.elements = {
      "#hours": "tableHours"
    };

    BookingHoursCtrl.prototype.loadHours = function(event) {
      var a, newDayAux, selectedDate;
      selectedDate = __FacadeCore.Cache_get(appName + "selectedDate");
      a = selectedDate.split('-');
      newDayAux = new Date(a[0], a[1] - 1, a[2]);
      return this.createCalendar(newDayAux);
    };

    BookingHoursCtrl.prototype.createCalendar = function(newDayAux) {
      var calendar, local, options, weekDaysClosed;
      local = __FacadeCore.Cache_get(appName + "local");
      weekDaysClosed = local.locSemanalDiary.closedDiary;
      options = {
        date: newDayAux
      };
      calendar = __FacadeCore.Cache_get(appName + "calendar");
      if (calendar) {
        options.calendar = calendar.calId;
        weekDaysClosed = calendar.calSemanalDiary.closedDiary;
      }
      return create(this.tableHours, weekDaysClosed, options);
    };

    BookingHoursCtrl.prototype.onToday = function(event) {
      var newDayAux;
      newDayAux = new Date();
      return this.createCalendar(newDayAux);
    };

    BookingHoursCtrl.prototype.loadFestive = function(event) {
      var _this, data, elementFestive, local, selectedDate, url;
      elementFestive = this.festive.html();
      Lungo.Element.loading("a[data-action=festive]", "black");
      local = __FacadeCore.Cache_get(appName + "local");
      selectedDate = __FacadeCore.Cache_get(appName + "selectedDate");
      url = "http://" + appHost + "/annual/manager/closeGoogleLocal";
      data = {
        id: local.id,
        selectedDate: selectedDate.toString()
      };
      _this = this;
      return $$.put(url, data, function(response) {
        _this.festive.html(elementFestive);
        _this.loadHours(event);
        return Lungo.Notification.success(findLangTextElement("label.notification.closeDateHolidays.title"), findLangTextElement("label.notification.closeDateHolidays.text"), null, 3);
      });
    };

    BookingHoursCtrl.prototype.onSelectDay = function(event) {
      var closed, selectedDateHours;
      closed = $$(event.target).hasClass("date_closed");
      if (!closed) {
        selectedDateHours = $$(event.target).attr("datetime");
        __FacadeCore.Cache_remove(appName + "selectedDateHours");
        __FacadeCore.Cache_set(appName + "selectedDateHours", selectedDateHours);
        return __FacadeCore.Router_section("newHours");
      }
    };

    BookingHoursCtrl.prototype.onCloseDay = function(event) {
      var _this, calendar, closed, data, firm, local, selectedDate, url;
      if (__FacadeCore.isDoubleTap(event)) {
        selectedDate = $$(event.target).attr("datetime");
        closed = $$(event.target).hasClass("date_closed");
        firm = __FacadeCore.Cache_get(appName + "firm");
        if (!closed) {
          calendar = __FacadeCore.Cache_get(appName + "calendar");
          if (calendar) {
            if (firm.firConfig.configLocal.configLocRepeat) {
              url = "http://" + appHost + "/event/operator/listCalendarByDayRepeat";
            } else {
              url = "http://" + appHost + "/event/operator/listCalendarByDay";
            }
            data = {
              id: calendar.calId,
              selectedDate: selectedDate.toString()
            };
          } else {
            if (firm.firConfig.configLocal.configLocRepeat) {
              url = "http://" + appHost + "/event/operator/listByDayRepeat";
            } else {
              url = "http://" + appHost + "/event/operator/listByDay";
            }
            local = __FacadeCore.Cache_get(appName + "local");
            data = {
              localId: local.id,
              selectedDate: selectedDate.toString()
            };
          }
          _this = this;
          return $$.json(url, data, function(response) {
            return _this.closeDate(response, event, selectedDate);
          });
        } else {
          return this.closeDateConfirm(event, selectedDate);
        }
      }
    };

    BookingHoursCtrl.prototype.closeDate = function(response, event, selectedDate) {
      var _this, dataAccept, dataCancel, dataConfirm;
      if (response && response.length > 0) {
        _this = this;
        dataAccept = {
          icon: 'checkmark',
          label: 'Accept',
          callback: function() {
            return _this.closeDateConfirm(event, selectedDate);
          }
        };
        dataCancel = {
          icon: 'checkmark',
          label: 'Cancel',
          callback: function() {
            return {};
          }
        };
        dataConfirm = {
          icon: 'user',
          title: findLangTextElement("label.notification.closeDateWithApo.title"),
          description: findLangTextElement("label.notification.closeDateWithApo.text"),
          accept: dataAccept,
          cancel: dataCancel
        };
        return Lungo.Notification.confirm(dataConfirm);
      } else {
        return this.closeDateConfirm(event, selectedDate);
      }
    };

    BookingHoursCtrl.prototype.closeDateConfirm = function(event, selectedDate) {
      var _this, calendar, data, local, url;
      calendar = __FacadeCore.Cache_get(appName + "calendar");
      if (calendar) {
        url = "http://" + appHost + "/annual/manager/closeCalendar";
        data = {
          id: calendar.calId,
          selectedDate: selectedDate
        };
      } else {
        url = "http://" + appHost + "/annual/manager/closeLocal";
        local = __FacadeCore.Cache_get(appName + "local");
        data = {
          localId: local.id,
          selectedDate: selectedDate
        };
      }
      _this = this;
      return $$.put(url, data, function() {
        _this.loadHours(event);
        return Lungo.Notification.success(findLangTextElement("label.notification.salvedData.title"), findLangTextElement("label.notification.salvedData.text"), null, 2);
      });
    };

    BookingHoursCtrl.prototype.onReturn = function(event) {
      var calendar;
      calendar = __FacadeCore.Cache_get(appName + "calendar");
      if (calendar) {
        return __FacadeCore.Router_section("newCalendar");
      } else {
        return __FacadeCore.Router_article("booking", "local-hours");
      }
    };

    return BookingHoursCtrl;

  })(Monocle.Controller);

  __Controller.BookingHours = new BookingHoursCtrl("section#booking-hours");

}).call(this);
