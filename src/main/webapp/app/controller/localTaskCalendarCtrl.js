// Generated by CoffeeScript 1.12.7
(function() {
  var LocalTaskCalendarCtrl,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  LocalTaskCalendarCtrl = (function(superClass) {
    extend(LocalTaskCalendarCtrl, superClass);

    function LocalTaskCalendarCtrl() {
      return LocalTaskCalendarCtrl.__super__.constructor.apply(this, arguments);
    }

    LocalTaskCalendarCtrl.prototype.events = {
      "load #localTaskCalendar": "loadLocalTask",
      "singleTap a[data-action=save]": "onSave",
      "singleTap a[data-action=cancel]": "onCancel",
      "singleTap a[data-action=all]": "onAll"
    };

    LocalTaskCalendarCtrl.prototype.elements = {
      "#localTaskCalendar-form": "listArt",
      "a[data-action=save]": "buttonSave",
      "a[data-action=cancel]": "buttonCancel"
    };

    LocalTaskCalendarCtrl.prototype.loadLocalTask = function(event) {
      var _this, data, local, url;
      Lungo.Element.loading("#localTaskCalendar-form ul", "black");
      url = "http://" + appHost + "/localTask/manager/listOnlySimple";
      local = __FacadeCore.Cache_get(appName + "local");
      data = {
        localId: local.id
      };
      _this = this;
      return $$.json(url, data, function(response) {
        return _this.showLocalTask(response);
      });
    };

    LocalTaskCalendarCtrl.prototype.showLocalTask = function(response) {
      var calendar, h, j, k, len, localTask, localTaskAux, lotEnabled, ref, result, results, texts, view;
      if (response.length > 0) {
        result = Lungo.Core.toArray(response);
        result = Lungo.Core.orderByProperty(result, "lotName", "asc");
        this.listArt.children().empty();
        texts = {
          cabText: findLangTextElement("localTask.select.cabText")
        };
        view = new __View.ListCabView({
          model: texts,
          container: "section#localTaskCalendar article#localTaskCalendar-form ul"
        });
        view.append(texts);
        calendar = __FacadeCore.Cache_get(appName + "calendar");
        results = [];
        for (j = 0, len = result.length; j < len; j++) {
          localTaskAux = result[j];
          lotEnabled = false;
          if (calendar && calendar.calLocalTasksId) {
            for (h = k = 0, ref = calendar.calLocalTasksId.length - 1; 0 <= ref ? k <= ref : k >= ref; h = 0 <= ref ? ++k : --k) {
              if (calendar.calLocalTasksId[h] === localTaskAux.id) {
                lotEnabled = true;
                break;
              }
            }
          }
          localTask = new __Model.LocalTask({
            enabled: lotEnabled,
            lotId: localTaskAux.id,
            lotTaskDuration: localTaskAux.lotTaskDuration,
            lotName: localTaskAux.lotName
          });
          view = new __View.LocalTaskCalendarView({
            model: localTask
          });
          results.push(view.append(localTask));
        }
        return results;
      } else {
        this.listArt.children().empty();
        texts = {
          cabText: findLangTextElement("localTask.select.cabText")
        };
        view = new __View.ListCabView({
          model: texts,
          container: "section#localTaskCalendar article#localTaskCalendar-form ul"
        });
        view.append(texts);
        return Lungo.Notification.success(findLangTextElement("label.notification.noData.title"), findLangTextElement("label.notification.noData.text"), null, 3);
      }
    };

    LocalTaskCalendarCtrl.prototype.onSave = function(event) {
      var _this, calendar, data, h, i, j, liLocalTask, listLocalTask, ref, selectLocalTask, strSelectLocalTask, strSelectLocalTaskName, url;
      listLocalTask = $$("#localTaskCalendar-form ul li");
      selectLocalTask = new Array();
      strSelectLocalTask = "";
      strSelectLocalTaskName = "";
      i = -1;
      for (h = j = 1, ref = listLocalTask.length - 1; 1 <= ref ? j <= ref : j >= ref; h = 1 <= ref ? ++j : --j) {
        liLocalTask = $$(listLocalTask[h]);
        if (liLocalTask.hasClass("accept")) {
          i++;
          selectLocalTask[i] = parseInt(liLocalTask.attr("lotId"));
          if (i > 0) {
            strSelectLocalTask += ",";
            strSelectLocalTaskName += " , ";
          }
          strSelectLocalTask += liLocalTask.attr("lotId");
          strSelectLocalTaskName += liLocalTask.attr("lotName");
        }
      }
      if (selectLocalTask.length > 0) {
        __FacadeCore.Cache_remove(appName + "elementSave");
        __FacadeCore.Cache_remove(appName + "elementCancel");
        __FacadeCore.Cache_set(appName + "elementSave", this.buttonSave.html());
        __FacadeCore.Cache_set(appName + "elementCancel", this.buttonCancel.html());
        Lungo.Element.loading(this.buttonSave.selector, "black");
        Lungo.Element.loading(this.buttonCancel.selector, "black");
        url = "http://" + appHost + "/calendar/manager/tasks";
        calendar = __FacadeCore.Cache_get(appName + "calendar");
        data = {
          id: calendar.calId,
          selectedTasks: strSelectLocalTask
        };
        _this = this;
        return $$.put(url, data, function() {
          return Lungo.Notification.success(findLangTextElement("label.notification.salvedData.title"), findLangTextElement("label.notification.salvedData.text"), null, 3, function() {
            calendar.calLocalTasksId = selectLocalTask;
            calendar.calLocalTasks = strSelectLocalTaskName;
            __Controller.CalendarNew.loadNew(event);
            __FacadeCore.Router_section("newCalendar");
            return _this.resetArticle();
          });
        });
      } else {
        return Lungo.Notification.error(findLangTextElement("label.notification.localTaskSelectOne.title"), findLangTextElement("label.notification.localTaskSelectOne.text"), null, 2);
      }
    };

    LocalTaskCalendarCtrl.prototype.onCancel = function(event) {
      __FacadeCore.Cache_remove(appName + "elementSave");
      __FacadeCore.Cache_remove(appName + "elementCancel");
      __FacadeCore.Cache_set(appName + "elementSave", this.buttonSave.html());
      __FacadeCore.Cache_set(appName + "elementCancel", this.buttonCancel.html());
      Lungo.Element.loading(this.buttonSave.selector, "black");
      Lungo.Element.loading(this.buttonCancel.selector, "black");
      __FacadeCore.Router_section("newCalendar");
      return this.resetArticle();
    };

    LocalTaskCalendarCtrl.prototype.onAll = function(event) {
      var h, j, liLocalTask, listLocalTask, ref, results;
      listLocalTask = $$("#localTaskCalendar-form ul li");
      results = [];
      for (h = j = 1, ref = listLocalTask.length - 1; 1 <= ref ? j <= ref : j >= ref; h = 1 <= ref ? ++j : --j) {
        liLocalTask = $$(listLocalTask[h]);
        if (!liLocalTask.hasClass("accept")) {
          liLocalTask.removeClass("cancel");
          results.push(liLocalTask.addClass("accept theme"));
        } else {
          results.push(void 0);
        }
      }
      return results;
    };

    LocalTaskCalendarCtrl.prototype.resetArticle = function() {
      this.buttonSave.html(__FacadeCore.Cache_get(appName + "elementSave"));
      return this.buttonCancel.html(__FacadeCore.Cache_get(appName + "elementCancel"));
    };

    return LocalTaskCalendarCtrl;

  })(Monocle.Controller);

  __Controller.LocalTaskCalendar = new LocalTaskCalendarCtrl("section#localTaskCalendar");

}).call(this);
