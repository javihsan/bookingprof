// Generated by CoffeeScript 1.12.7
(function() {
  var CalendarNewCtrl,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  CalendarNewCtrl = (function(superClass) {
    var conserveCal;

    extend(CalendarNewCtrl, superClass);

    function CalendarNewCtrl() {
      return CalendarNewCtrl.__super__.constructor.apply(this, arguments);
    }

    conserveCal = false;

    CalendarNewCtrl.prototype.events = {
      "singleTap a[data-action=save]": "onSave",
      "singleTap a[data-action=cancel]": "onCancel",
      "load #newCalendar": "loadNew",
      "unload #newCalendar": "unloadNew",
      "singleTap #liPlaceTasks": "onTasks",
      "singleTap #liPlaceHours": "onHours",
      "singleTap #liPlaceHoursMon": "onHoursSem",
      "singleTap #liPlaceHoursTue": "onHoursSem",
      "singleTap #liPlaceHoursWed": "onHoursSem",
      "singleTap #liPlaceHoursThu": "onHoursSem",
      "singleTap #liPlaceHoursFri": "onHoursSem",
      "singleTap #liPlaceHoursSat": "onHoursSem",
      "singleTap #liPlaceHoursSun": "onHoursSem",
      "doubleTap #liPlaceHoursMon": "onCloseSem",
      "doubleTap #liPlaceHoursTue": "onCloseSem",
      "doubleTap #liPlaceHoursWed": "onCloseSem",
      "doubleTap #liPlaceHoursThu": "onCloseSem",
      "doubleTap #liPlaceHoursFri": "onCloseSem",
      "doubleTap #liPlaceHoursSat": "onCloseSem",
      "doubleTap #liPlaceHoursSun": "onCloseSem"
    };

    CalendarNewCtrl.prototype.elements = {
      "a[data-action=save]": "buttonSave",
      "a[data-action=cancel]": "buttonCancel",
      "#calName": "calName",
      "#error_calName": "calNameError",
      "#calDesc": "calDesc",
      "#error_calDesc": "calDescError",
      "#placeTasks": "placeTasks",
      "#placeHours": "placeHours",
      "#placeHoursMon": "placeHoursMon",
      "#placeHoursTue": "placeHoursTue",
      "#placeHoursWed": "placeHoursWed",
      "#placeHoursThu": "placeHoursThu",
      "#placeHoursFri": "placeHoursFri",
      "#placeHoursSat": "placeHoursSat",
      "#placeHoursSun": "placeHoursSun"
    };

    CalendarNewCtrl.prototype.loadNew = function(event) {
      var annual, annuals, asyn, calendar, data, date, i, indxHours, len, local, max, selectedDate, strHours, url;
      conserveCal = false;
      calendar = __FacadeCore.Cache_get(appName + "calendar");
      if (calendar) {
        this.calName.val(calendar.calName);
        this.calDesc.val(calendar.calDesc);
        this.placeTasks.parent().show();
        this.placeHours.parent().show();
        this.placeHoursMon.parent().show();
        this.placeHoursTue.parent().show();
        this.placeHoursWed.parent().show();
        this.placeHoursThu.parent().show();
        this.placeHoursFri.parent().show();
        this.placeHoursSat.parent().show();
        this.placeHoursSun.parent().show();
        this.placeTasks.html(calendar.calLocalTasks);
        this.placeHoursMon.html(getStrDiary(calendar.calDiaryMon));
        this.placeHoursTue.html(getStrDiary(calendar.calDiaryTue));
        this.placeHoursWed.html(getStrDiary(calendar.calDiaryWed));
        this.placeHoursThu.html(getStrDiary(calendar.calDiaryThu));
        this.placeHoursFri.html(getStrDiary(calendar.calDiaryFri));
        this.placeHoursSat.html(getStrDiary(calendar.calDiarySat));
        this.placeHoursSun.html(getStrDiary(calendar.calDiarySun));
        asyn = __FacadeCore.Service_Settings_asyncFalse();
        url = "http://" + appHost + "/annual/manager/getAnnualDiaryCalendarByDate";
        local = __FacadeCore.Cache_get(appName + "local");
        selectedDate = dateToString(new Date());
        data = {
          id: calendar.calId,
          localId: local.id,
          selectedDate: selectedDate.toString()
        };
        annuals = Lungo.Core.toArray($$.json(url, data));
        annuals = Lungo.Core.orderByProperty(annuals, "anuDate", "asc");
        __FacadeCore.Service_Settings_async(asyn);
        strHours = "";
        indxHours = -1;
        max = 5;
        for (i = 0, len = annuals.length; i < len; i++) {
          annual = annuals[i];
          date = new Date(annual.anuDate);
          indxHours++;
          if (indxHours <= max) {
            if (indxHours > 0) {
              strHours += " , ";
            }
            if (indxHours === max) {
              strHours += "...";
            } else {
              strHours += dateToStringYearLast(date);
            }
          }
        }
        return this.placeHours.html(strHours);
      } else {
        this.placeTasks.parent().hide();
        this.placeHours.parent().hide();
        this.placeHoursMon.parent().hide();
        this.placeHoursTue.parent().hide();
        this.placeHoursWed.parent().hide();
        this.placeHoursThu.parent().hide();
        this.placeHoursFri.parent().hide();
        this.placeHoursSat.parent().hide();
        return this.placeHoursSun.parent().hide();
      }
    };

    CalendarNewCtrl.prototype.onSave = function(event) {
      var _this, calendar, data, local, url;
      if (this.validateForm()) {
        __FacadeCore.Cache_remove(appName + "elementSave");
        __FacadeCore.Cache_remove(appName + "elementCancel");
        __FacadeCore.Cache_set(appName + "elementSave", this.buttonSave.html());
        __FacadeCore.Cache_set(appName + "elementCancel", this.buttonCancel.html());
        Lungo.Element.loading(this.buttonSave.selector, "black");
        Lungo.Element.loading(this.buttonCancel.selector, "black");
        local = __FacadeCore.Cache_get(appName + "local");
        calendar = __FacadeCore.Cache_get(appName + "calendar");
        url = "http://" + appHost + "/calendar/manager/new";
        data = {
          localId: local.id,
          calName: this.calName.val(),
          calDesc: this.calDesc.val()
        };
        if (calendar) {
          data.id = calendar.calId;
        }
        _this = this;
        return $$.post(url, data, function(response) {
          return Lungo.Notification.success(findLangTextElement("label.notification.salvedData.title"), findLangTextElement("label.notification.salvedData.text"), null, 3, function(response) {
            return __FacadeCore.Router_article("booking", "list-calendar");
          });
        });
      }
    };

    CalendarNewCtrl.prototype.validateForm = function() {
      var result;
      result = true;
      this.calNameError.html("");
      this.calDescError.html("");
      if (!this.calName[0].checkValidity()) {
        this.calNameError.html(getMessageValidity(this.calName[0]));
        this.calName[0].focus();
        result = false;
      } else if (!this.calDesc[0].checkValidity()) {
        this.calDescError.html(getMessageValidity(this.calDesc[0]));
        this.calDesc[0].focus();
        result = false;
      }
      return result;
    };

    CalendarNewCtrl.prototype.onCancel = function(event) {
      __FacadeCore.Cache_remove(appName + "elementSave");
      __FacadeCore.Cache_remove(appName + "elementCancel");
      __FacadeCore.Cache_set(appName + "elementSave", this.buttonSave.html());
      __FacadeCore.Cache_set(appName + "elementCancel", this.buttonCancel.html());
      Lungo.Element.loading(this.buttonSave.selector, "black");
      Lungo.Element.loading(this.buttonCancel.selector, "black");
      return __FacadeCore.Router_article("booking", "list-calendar");
    };

    CalendarNewCtrl.prototype.resetArticle = function() {
      this.buttonSave.html(__FacadeCore.Cache_get(appName + "elementSave"));
      this.buttonCancel.html(__FacadeCore.Cache_get(appName + "elementCancel"));
      this.calName.val("");
      this.calDesc.val("");
      this.calNameError.html("");
      this.calDescError.html("");
      this.placeTasks.html("");
      this.placeHoursMon.html("");
      this.placeHoursTue.html("");
      this.placeHoursWed.html("");
      this.placeHoursThu.html("");
      this.placeHoursFri.html("");
      this.placeHoursSat.html("");
      this.placeHoursSun.html("");
      return this.placeHours.html("");
    };

    CalendarNewCtrl.prototype.unloadNew = function(event) {
      this.resetArticle();
      if (!conserveCal) {
        return __FacadeCore.Cache_remove(appName + "calendar");
      }
    };

    CalendarNewCtrl.prototype.onTasks = function(event) {
      var calendar;
      calendar = __FacadeCore.Cache_get(appName + "calendar");
      if (calendar && calendar.calId) {
        conserveCal = true;
        return __FacadeCore.Router_section("localTaskCalendar");
      }
    };

    CalendarNewCtrl.prototype.onHoursSem = function(event) {
      var calendar, diary, sem;
      calendar = __FacadeCore.Cache_get(appName + "calendar");
      if (calendar && calendar.calId) {
        sem = event.currentTarget.id.substring(event.currentTarget.id.length - 3);
        diary = eval("calendar.calDiary" + sem);
        diary.sem = sem;
        __FacadeCore.Cache_remove(appName + "diary");
        __FacadeCore.Cache_set(appName + "diary", diary);
        conserveCal = true;
        return __FacadeCore.Router_section("newHours");
      }
    };

    CalendarNewCtrl.prototype.onHours = function(event) {
      var calendar;
      calendar = __FacadeCore.Cache_get(appName + "calendar");
      if (calendar && calendar.calId) {
        conserveCal = true;
        return __FacadeCore.Router_section("booking-hours");
      }
    };

    CalendarNewCtrl.prototype.onCloseSem = function(event) {
      var _this, calendar, closed, data, diary, sem, url;
      if (__FacadeCore.isDoubleTap(event)) {
        calendar = __FacadeCore.Cache_get(appName + "calendar");
        if (calendar && calendar.calId) {
          closed = $$("#" + event.currentTarget.id + " span div")[0];
          if (!closed) {
            url = "http://" + appHost + "/diary/manager/update";
            sem = event.currentTarget.id.substring(event.currentTarget.id.length - 3);
            diary = eval("calendar.calDiary" + sem);
            data = {
              id: diary.id,
              selectedTimes: ""
            };
            _this = this;
            return $$.put(url, data, function() {
              diary.diaTimes = null;
              eval("calendar.calDiary" + sem + " = diary");
              eval("_this.placeHours" + sem + ".html (getStrDiary(diary))");
              calendar.calSemanalDiary.closedDiary[calendar.calSemanalDiary.closedDiary.length] = getSemDayNum(sem);
              return Lungo.Notification.success(findLangTextElement("label.notification.salvedData.title"), findLangTextElement("label.notification.salvedData.text"), null, 3);
            });
          }
        }
      }
    };

    return CalendarNewCtrl;

  })(Monocle.Controller);

  __Controller.CalendarNew = new CalendarNewCtrl("section#newCalendar");

}).call(this);
