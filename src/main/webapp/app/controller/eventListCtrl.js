// Generated by CoffeeScript 1.12.7
(function() {
  var EventListCtrl,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  EventListCtrl = (function(superClass) {
    var result;

    extend(EventListCtrl, superClass);

    function EventListCtrl() {
      return EventListCtrl.__super__.constructor.apply(this, arguments);
    }

    result = null;

    EventListCtrl.prototype.events = {
      "load article#list-events": "loadListEvents",
      "singleTap a[data-action=places]": "onPlaces"
    };

    EventListCtrl.prototype.elements = {
      "#list-events": "listEvents",
      "header a[href=\\#]": "header",
      "a[data-action=places]": "places"
    };

    EventListCtrl.prototype.setResult = function(res) {
      return result = null;
    };

    EventListCtrl.prototype.onPrevius = function(event) {
      return this.change(event, -1);
    };

    EventListCtrl.prototype.onNext = function(event) {
      return this.change(event, 1);
    };

    EventListCtrl.prototype.change = function(event, delta) {
      var a, newDayAux, oneWeek, selectedDate;
      selectedDate = __FacadeCore.Cache_get(appName + "selectedDateDiary");
      a = selectedDate.split('-');
      newDayAux = new Date(a[0], a[1] - 1, a[2]);
      oneWeek = 1000 * 60 * 60 * 24 * 7;
      newDayAux.setTime(newDayAux.getTime() + (delta * oneWeek));
      selectedDate = dateToString(newDayAux);
      __FacadeCore.Cache_remove(appName + "selectedDateDiary");
      __FacadeCore.Cache_set(appName + "selectedDateDiary", selectedDate);
      result = null;
      return this.loadListEventsWeek(event);
    };

    EventListCtrl.prototype.loadListEvents = function(event) {
      var newDayAux, selectedDate;
      this.header.hide();
      this.places.show();
      selectedDate = __FacadeCore.Cache_get(appName + "selectedDateDiary");
      if (!selectedDate) {
        newDayAux = new Date();
        selectedDate = dateToString(newDayAux);
        __FacadeCore.Cache_remove(appName + "selectedDateDiary");
        __FacadeCore.Cache_set(appName + "selectedDateDiary", selectedDate);
      }
      result = null;
      return this.loadListEventsWeek(event);
    };

    EventListCtrl.prototype.loadListEventsWeek = function(event) {
      var _this, a, data, dayFirstWeek, dayWeek, local, newDay, oneDay, selectedDate, selectedDateFirstWeek;
      Lungo.Element.loading("#list-events ul", "black");
      selectedDate = __FacadeCore.Cache_get(appName + "selectedDateDiary");
      a = selectedDate.split('-');
      newDay = new Date(a[0], a[1] - 1, a[2]);
      dayWeek = newDay.getDay();
      if (dayWeek === 0) {
        dayWeek = 6;
      } else {
        dayWeek = dayWeek - 1;
      }
      oneDay = 1000 * 60 * 60 * 24;
      dayFirstWeek = new Date();
      dayFirstWeek.setTime(newDay.getTime() - (dayWeek * oneDay));
      if (!result) {
        selectedDateFirstWeek = dateToString(dayFirstWeek);
        local = __FacadeCore.Cache_get(appName + "local");
        data = {
          localId: local.id,
          selectedDate: selectedDateFirstWeek.toString()
        };
        _this = this;
        return $$.json(urlListByDiary, data, function(response) {
          return _this.showListEvents(response, newDay, dayFirstWeek);
        });
      } else {
        return this.showListEvents(null, newDay, dayFirstWeek);
      }
    };

    EventListCtrl.prototype.showListEvents = function(response, daySelect, dayFirstWeek) {
      var calEnabled, consumed, dateDay, dateDayAnt, dateDaySelect, dateHour, dateHourEnd, descrip, event, eventAux, eventMov, h, i, j, len, oneDay, rate, ref, rejected, selectCalendar, textsTemplates, view;
      if (!result) {
        result = Lungo.Core.toArray(response);
        result = Lungo.Core.orderByProperty(result, "eveStartTime", "asc");
      }
      this.listEvents.children().empty();
      textsTemplates = {
        displayUntil: findLangTextElement("label.template.displayUntil"),
        pressDisplayMore: findLangTextElement("label.template.pressDisplayMore")
      };
      eventMov = new __Model.Event({
        eveDay: dateToStringFormat(dayFirstWeek),
        texts: textsTemplates
      });
      view = new __View.EventListFromView({
        model: eventMov
      });
      view.append(eventMov);
      dateDaySelect = dateToStringFormat(daySelect);
      dateDayAnt = "";
      textsTemplates = {
        pressDisplay: findLangTextElement("label.template.pressDisplay"),
        finished: findLangTextElement("label.template.finished"),
        rejected: findLangTextElement("label.template.rejected")
      };
      for (i = 0, len = result.length; i < len; i++) {
        eventAux = result[i];
        selectCalendar = __FacadeCore.Cache_get(appName + "selectCalendarDiary");
        calEnabled = false;
        if (selectCalendar) {
          for (h = j = 0, ref = selectCalendar.length - 1; 0 <= ref ? j <= ref : j >= ref; h = 0 <= ref ? ++j : --j) {
            if (selectCalendar[h] === eventAux.eveCalendarId) {
              calEnabled = true;
              break;
            }
          }
        } else {
          calEnabled = true;
        }
        if (calEnabled) {
          dateHour = new Date(eventAux.eveStartTime);
          dateHourEnd = new Date(eventAux.eveEndTime);
          dateDay = dateToStringFormat(dateHour);
          rate = 0;
          consumed = false;
          if (eventAux.eveConsumed === 1) {
            consumed = true;
          }
          rejected = false;
          if (eventAux.eveConsumed === 2) {
            rejected = true;
          }
          descrip = eventAux.eveDesc;
          if (!eventAux.eveClient) {
            descrip = eventAux.repName;
          }
          event = new __Model.Event({
            eveId: eventAux.id,
            eveStartTime: eventAux.eveStartTime,
            eveDay: dateDay,
            eveHour: dateToStringHour(dateHour),
            eveHourEnd: dateToStringHour(dateHourEnd),
            eveName: eventAux.eveName,
            eveClient: eventAux.eveClient,
            eveDesc: descrip,
            eveCalendarName: eventAux.eveCalendarName,
            eveLocalTask: eventAux.eveLocalTask,
            eveICS: eventAux.eveICS,
            eveConsumed: consumed,
            eveRejected: rejected,
            enabled: true,
            texts: textsTemplates
          });
          if (dateDay !== dateDayAnt) {
            view = new __View.EventListDayView({
              model: event
            });
            view.append(event);
          }
          if (dateDay === dateDaySelect) {
            if (eventAux.eveClient) {
              if (operatorRead) {
                view = new __View.EventListReadView({
                  model: event
                });
              } else {
                view = new __View.EventListView({
                  model: event
                });
              }
            } else {
              view = new __View.EventListSPView({
                model: event
              });
            }
            view.append(event);
          }
          dateDayAnt = dateDay;
        }
      }
      oneDay = 1000 * 60 * 60 * 24;
      dayFirstWeek.setTime(dayFirstWeek.getTime() + (6 * oneDay));
      textsTemplates = {
        displayFrom: findLangTextElement("label.template.displayFrom"),
        pressDisplayMore: findLangTextElement("label.template.pressDisplayMore")
      };
      eventMov = new __Model.Event({
        eveDay: dateToStringFormat(dayFirstWeek),
        texts: textsTemplates
      });
      view = new __View.EventListUntilView({
        model: eventMov
      });
      return view.append(eventMov);
    };

    EventListCtrl.prototype.onPlaces = function(event) {
      return __FacadeCore.Router_section("calendarDiarySelect");
    };

    return EventListCtrl;

  })(Monocle.Controller);

  __Controller.EventList = new EventListCtrl("section#booking");

}).call(this);
