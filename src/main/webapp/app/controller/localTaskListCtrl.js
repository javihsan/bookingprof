// Generated by CoffeeScript 1.12.7
(function() {
  var LocalTaskListCtrl,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  LocalTaskListCtrl = (function(superClass) {
    var result;

    extend(LocalTaskListCtrl, superClass);

    function LocalTaskListCtrl() {
      return LocalTaskListCtrl.__super__.constructor.apply(this, arguments);
    }

    result = {};

    LocalTaskListCtrl.prototype.events = {
      "load article#local-tasks": "loadListLocalTask",
      "unload article#local-tasks": "onUnload",
      "singleTap a[data-action=new]": "newLocalTask",
      "singleTap a[data-action=all]": "onAll",
      "singleTap a[data-action=bookable]": "onBookable",
      "singleTap a[data-action=billed]": "onBilled"
    };

    LocalTaskListCtrl.prototype.elements = {
      "#local-tasks": "listLocalTask",
      "header a[href=\\#]": "header",
      "header a[href=\\#menu]": "aside",
      "a[data-action=new]": "buttonAdd",
      "a[data-action=all]": "buttonAll",
      "a[data-action=bookable]": "buttonBookable",
      "a[data-action=billed]": "buttonBilled",
      "footer a": "footer"
    };

    LocalTaskListCtrl.prototype.newLocalTask = function(event) {
      if (this.listLocalTask.hasClass("active")) {
        return __FacadeCore.Router_article("newLocalTask", "localTask-form");
      }
    };

    LocalTaskListCtrl.prototype.onAll = function(event) {
      return this.showLocalTask("all");
    };

    LocalTaskListCtrl.prototype.onBookable = function(event) {
      return this.showLocalTask("bookable");
    };

    LocalTaskListCtrl.prototype.onBilled = function(event) {
      return this.showLocalTask("billed");
    };

    LocalTaskListCtrl.prototype.loadListLocalTask = function(event) {
      var _this, data, firm, local, url;
      this.header.hide();
      this.aside.show();
      this.buttonAdd.show();
      this.footer.hide();
      firm = __FacadeCore.Cache_get(appName + "firm");
      if (firm.firBilledModule === 1) {
        this.buttonBookable.show();
        this.buttonAll.show();
        this.buttonBilled.show();
      }
      Lungo.Element.loading("#local-tasks ul", "black");
      url = "http://" + appHost + "/localTask/manager/listCombi";
      local = __FacadeCore.Cache_get(appName + "local");
      data = {
        localId: local.id
      };
      _this = this;
      return $$.json(url, data, function(response) {
        return _this.showLocalTaskList(response);
      });
    };

    LocalTaskListCtrl.prototype.showLocalTaskList = function(response) {
      var firm, texts, view;
      if (response.length > 0) {
        result = Lungo.Core.toArray(response);
        result = Lungo.Core.orderByProperty(result, "lotName", "asc");
        firm = __FacadeCore.Cache_get(appName + "firm");
        if (firm.firBilledModule === 1) {
          return this.showLocalTask("bookable");
        } else {
          return this.showLocalTask("");
        }
      } else {
        this.listLocalTask.children().empty();
        texts = {
          cabText: findLangTextElement("label.aside.localTasks")
        };
        view = new __View.ListCabView({
          model: texts,
          container: "section#booking article#local-tasks ul"
        });
        view.append(texts);
        return Lungo.Notification.success(findLangTextElement("label.notification.noData.title"), findLangTextElement("label.notification.noData.text"), null, 3);
      }
    };

    LocalTaskListCtrl.prototype.showLocalTask = function(type) {
      var defaultAux, firm, hasLotTaskRate, i, j, len, len1, local, localTask, localTaskAux, lotTaskDuration, lotTaskPost, lotTaskRate, ref, res, results, strType, texts, textsTemplates, view;
      this.listLocalTask.children().empty();
      strType = "";
      if (type === "bookable") {
        strType = " - " + findLangTextElement("localTask.bookable");
      } else if (type === "billed") {
        strType = " - " + findLangTextElement("localTask.billed");
      } else if (type === "all") {
        strType = " - " + findLangTextElement("form.all");
      } else {
        type = "all";
      }
      texts = {
        cabText: findLangTextElement("label.aside.localTasks") + " " + strType
      };
      view = new __View.ListCabView({
        model: texts,
        container: "section#booking article#local-tasks ul"
      });
      view.append(texts);
      local = __FacadeCore.Cache_get(appName + "local");
      textsTemplates = {
        "default": findLangTextElement("label.template.localTaskdefault"),
        currency: local.locWhere.wheCurrency
      };
      results = [];
      for (i = 0, len = result.length; i < len; i++) {
        localTaskAux = result[i];
        if ((type === "bookable" && (localTaskAux.lotTaskDuration > 0 || (localTaskAux.lotTaskCombiId && localTaskAux.lotTaskCombiId.length > 0))) || (type === "billed" && localTaskAux.lotTaskRate > 0) || (type === "all")) {
          defaultAux = false;
          if (local.locTaskDefaultId === localTaskAux.id) {
            defaultAux = true;
          }
          lotTaskDuration = localTaskAux.lotTaskDuration;
          lotTaskPost = "0";
          if (localTaskAux.lotTaskPost !== null) {
            lotTaskPost = localTaskAux.lotTaskPost;
          }
          lotTaskRate = localTaskAux.lotTaskRate;
          hasLotTaskRate = true;
          firm = __FacadeCore.Cache_get(appName + "firm");
          if (firm.firBilledModule === 0) {
            hasLotTaskRate = false;
          }
          if (localTaskAux.lotTaskCombiRes && localTaskAux.lotTaskCombiRes.length > 0) {
            lotTaskDuration = "";
            ref = localTaskAux.lotTaskCombiRes;
            for (j = 0, len1 = ref.length; j < len1; j++) {
              res = ref[j];
              if (lotTaskDuration !== "") {
                lotTaskDuration += ",";
              }
              lotTaskDuration += res;
            }
            hasLotTaskRate = false;
          }
          localTask = new __Model.LocalTask({
            enabled: true,
            lotDefault: defaultAux,
            lotId: localTaskAux.id,
            lotLocalId: localTaskAux.lotLocalId,
            lotTaskId: localTaskAux.lotTaskId,
            lotNameMulti: localTaskAux.lotNameMulti,
            lotTaskDuration: lotTaskDuration.toString(),
            lotTaskPost: lotTaskPost.toString(),
            lotTaskRate: parseFloat(lotTaskRate).toFixed(2),
            hasLotTaskRate: hasLotTaskRate,
            lotName: localTaskAux.lotName,
            lotTaskCombiId: localTaskAux.lotTaskCombiId,
            lotTaskCombiRes: localTaskAux.lotTaskCombiRes,
            lotVisible: localTaskAux.lotVisible,
            texts: textsTemplates
          });
          view = new __View.LocalTaskListView({
            model: localTask
          });
          results.push(view.append(localTask));
        } else {
          results.push(void 0);
        }
      }
      return results;
    };

    LocalTaskListCtrl.prototype.onUnload = function(event) {
      return result = {};
    };

    return LocalTaskListCtrl;

  })(Monocle.Controller);

  __Controller.LocalTaskList = new LocalTaskListCtrl("section#booking");

}).call(this);
