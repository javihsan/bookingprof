// Generated by CoffeeScript 1.12.7
(function() {
  var BookingMonthCtrl,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  BookingMonthCtrl = (function(superClass) {
    extend(BookingMonthCtrl, superClass);

    function BookingMonthCtrl() {
      return BookingMonthCtrl.__super__.constructor.apply(this, arguments);
    }

    BookingMonthCtrl.prototype.events = {
      "load article#table-month": "loadCalendarMonth",
      "singleTap a[data-action=today]": "onToday",
      "singleTap article#table-month td": "onSelectDay"
    };

    BookingMonthCtrl.prototype.elements = {
      "#table-month": "tableMonth",
      "#daySelected": "daySelected",
      "a[data-action=today]": "today",
      "header a[href=\\#]": "header",
      "header a[href=\\#menu]": "aside",
      "footer a": "footer",
      "footer a[href=\\#list-invoices]": "footerInvoice",
      "footer a[href=\\#table-day]": "footerBook"
    };

    BookingMonthCtrl.prototype.loadCalendarMonth = function(event) {
      var a, firm, newDayAux, selectedDate;
      this.header.hide();
      this.aside.show();
      this.today.show();
      this.footer.show();
      firm = __FacadeCore.Cache_get(appName + "firm");
      if (firm.firBilledModule === 0) {
        this.footerInvoice.hide();
      }
      if (operatorRead) {
        this.footerBook.hide();
      }
      selectedDate = __FacadeCore.Cache_get(appName + "selectedDate");
      a = selectedDate.split('-');
      newDayAux = new Date(a[0], a[1] - 1, a[2]);
      return this.createCalendar(newDayAux);
    };

    BookingMonthCtrl.prototype.createCalendar = function(newDayAux) {
      var local, openDaysAux, weekDaysClosed;
      local = __FacadeCore.Cache_get(appName + "local");
      openDaysAux = local.locOpenDays;
      weekDaysClosed = local.locSemanalDiary.closedDiary;
      return create(this.tableMonth, weekDaysClosed, {
        date: newDayAux,
        openDays: openDaysAux
      });
    };

    BookingMonthCtrl.prototype.onToday = function(event) {
      var newDayAux;
      if (this.tableMonth.hasClass("active")) {
        newDayAux = new Date();
        return this.createCalendar(newDayAux);
      }
    };

    BookingMonthCtrl.prototype.onSelectDay = function(event) {
      var selectedDate;
      selectedDate = $$(event.target).attr("datetime");
      if (operatorRead) {
        __FacadeCore.Cache_remove(appName + "selectedDateDiary");
        __FacadeCore.Cache_set(appName + "selectedDateDiary", new String(selectedDate));
        return __FacadeCore.Router_article("booking", "list-events");
      } else if (!$$(event.target).hasClass('date_closed')) {
        if (adminOption || !$$(event.target).hasClass('date_not_enabled')) {
          __FacadeCore.Cache_remove(appName + "selectedDate");
          __FacadeCore.Cache_set(appName + "selectedDate", new String(selectedDate));
          return __FacadeCore.Router_article("booking", "table-day");
        }
      }
    };

    return BookingMonthCtrl;

  })(Monocle.Controller);

  __Controller.BookingMonth = new BookingMonthCtrl("section#booking");

}).call(this);
