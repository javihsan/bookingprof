// Generated by CoffeeScript 1.12.7
(function() {
  var BookingCtrl,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  BookingCtrl = (function(superClass) {
    extend(BookingCtrl, superClass);

    function BookingCtrl() {
      return BookingCtrl.__super__.constructor.apply(this, arguments);
    }

    BookingCtrl.prototype.events = {
      "load article#table-day": "loadCalendarDay",
      "singleTap a[data-action=today]": "onToday",
      "singleTap article#table-day thead tr:first-child": "onSelectedTasks",
      "singleTap article#table-day thead tr:last-child th:first-child": "onPreviusDay",
      "singleTap article#table-day thead tr:last-child th:last-child": "onNextDay"
    };

    BookingCtrl.prototype.elements = {
      "#table-day": "tableDay",
      "#table-day-container": "tableDayContainer",
      "#daySelected": "daySelected",
      "#tasksSelected": "tasksSelected",
      "article#table-day thead tr:last-child th:first-child": "previusDay",
      "article#table-day thead tr:last-child th:last-child": "nextDay",
      "header a[href=\\#]": "header",
      "a[data-action=today]": "today"
    };

    BookingCtrl.prototype.onSelectedTasks = function(event) {
      return __FacadeCore.Router_article("taskSelect", "task-form");
    };

    BookingCtrl.prototype.loadCalendarDay = function(event) {
      var _this, a, calendarSel, data, h, i, j, len, len1, local, maxDate, newDayAux, oneDay, openDaysAux, selectTaskParam, selectedCalendars, selectedCalendarsParam, selectedDate, selectedTasks, selectedTasksCount, strSelectedCalendars, strTasks, taskSel, timeNot, today;
      selectedTasks = __FacadeCore.Cache_get(appName + "selectedTasks");
      if (selectedTasks) {
        selectedTasksCount = __FacadeCore.Cache_get(appName + "selectedTasksCount");
        this.header.hide();
        this.today.show();
        Lungo.Element.loading("#table-day-container", "black");
        selectedDate = __FacadeCore.Cache_get(appName + "selectedDate");
        local = __FacadeCore.Cache_get(appName + "local");
        openDaysAux = local.locOpenDays;
        selectedCalendars = __FacadeCore.Cache_get(appName + "selectedCalendars");
        if (!selectedCalendars) {
          selectedCalendarsParam = "";
          strSelectedCalendars = "";
        } else {
          selectedCalendarsParam = new Array();
          strSelectedCalendars = "<br> " + findLangTextElement("label.header.places") + ":";
          h = 0;
          for (i = 0, len = selectedCalendars.length; i < len; i++) {
            calendarSel = selectedCalendars[i];
            strSelectedCalendars += " " + calendarSel.name;
            selectedCalendarsParam[h] = calendarSel.id;
            h++;
          }
        }
        a = selectedDate.split('-');
        newDayAux = new Date(a[0], a[1] - 1, a[2]);
        oneDay = 1000 * 60 * 60 * 24;
        today = new Date();
        today.setHours(0);
        today.setMinutes(0);
        today.setSeconds(0);
        today.setMilliseconds(0);
        maxDate = new Date();
        maxDate.setTime(today.getTime() + (openDaysAux * oneDay));
        this.previusDay.removeClass("not_enabled");
        this.nextDay.removeClass("not_enabled");
        if (!adminOption) {
          if (newDayAux <= today) {
            this.previusDay.addClass("not_enabled");
          }
          if (newDayAux >= maxDate) {
            this.nextDay.addClass("not_enabled");
          }
        }
        this.daySelected.html(dateToStringFormat(newDayAux));
        h = 0;
        selectTaskParam = new Array();
        if (selectedTasks[0].numLines) {
          strTasks = findLangTextElement("label.template.numLines") + ": " + selectedTasks[0].numLines;
          strTasks += " - " + findLangTextElement("label.template.numPallets") + ": " + selectedTasks[0].numPallets;
        } else {
          strTasks = findLangTextElement("label.html.apoFor1");
          if (local.locNumPersonsApo > 1) {
            strTasks += " " + selectedTasksCount.length + " " + findLangTextElement("label.html.apoFor2");
          }
          strTasks += ": ";
          for (j = 0, len1 = selectedTasks.length; j < len1; j++) {
            taskSel = selectedTasks[j];
            if (local.locMulServices === 1) {
              strTasks += " 1 ";
            }
            strTasks += taskSel.tasName;
            selectTaskParam[h] = taskSel.id;
            h++;
          }
        }
        strTasks += strSelectedCalendars;
        strTasks += "<br>" + findLangTextElement("label.html.apoFor3");
        this.tasksSelected.html(strTasks);
        data = {
          localId: local.id,
          selectedDate: selectedDate.toString(),
          selectedTasks: selectTaskParam,
          selectedTasksCount: selectedTasksCount,
          selectedCalendars: selectedCalendarsParam
        };
        if (selectedTasks[0].numLines) {
          data.numLines = selectedTasks[0].numLines;
          data.numPallets = selectedTasks[0].numPallets;
        }
        _this = this;
        return $$.json(urlListApoByDay, data, function(response) {
          return _this.showCalendarDay(response, data);
        });
      } else {
        this.tasksSelected.html("");
        timeNot = 3;
        if (adminOption) {
          timeNot = 1;
        }
        return Lungo.Notification.success(findLangTextElement("label.notification.selectTask.title"), findLangTextElement("label.notification.selectTask.text"), null, timeNot, function(response) {
          return __FacadeCore.Router_article("taskSelect", "task-form");
        });
      }
    };

    BookingCtrl.prototype.showCalendarDay = function(response, data) {
      var a, appointment, appointmentAux, bgColor, cal, calendars, firm, h, hourAux, hours, i, j, k, l, len, len1, len2, m, margin_left_first, margin_left_row, margin_top_first, margin_top_row, newDayAux, numCals, num_apo, resultApos, results, todayAux, top_hour, view, x;
      resultApos = Lungo.Core.toArray(response);
      resultApos = Lungo.Core.orderByProperty(resultApos, "apoName", "asc");
      margin_top_first = 15;
      margin_left_first = 3;
      margin_top_row = 100;
      margin_left_row = 16;
      this.tableDayContainer.empty();
      if (resultApos.length > 0) {
        hours = [];
        for (h = i = 0; i <= 23; h = ++i) {
          hours[h] = [0, 0];
        }
        for (j = 0, len = resultApos.length; j < len; j++) {
          appointmentAux = resultApos[j];
          hourAux = parseInt(appointmentAux.apoName.split(":")[0]);
          hours[hourAux][1] = 1;
        }
        x = -1;
        for (h = k = 0; k <= 23; h = ++k) {
          if (hours[h][1] === 1) {
            x++;
            hours[h][1] = x;
          }
        }
        firm = __FacadeCore.Cache_get(appName + "firm");
        calendars = __FacadeCore.Cache_get(appName + "calCandidates");
        numCals = __FacadeCore.Cache_get(appName + "numCals");
        bgColor = 0;
        results = [];
        for (l = 0, len1 = resultApos.length; l < len1; l++) {
          appointmentAux = resultApos[l];
          hourAux = parseInt(appointmentAux.apoName.split(":")[0]);
          num_apo = hours[hourAux][0];
          hours[hourAux][0] = hours[hourAux][0] + 1;
          top_hour = hours[hourAux][1];
          if (numCals > 1 && firm.firConfig.configLocal.configLocSelCalAfter) {
            margin_left_row = 21;
            bgColor = 1;
            for (m = 0, len2 = calendars.length; m < len2; m++) {
              cal = calendars[m];
              if (cal.id !== appointmentAux.apoCalendarId) {
                bgColor++;
              } else {
                break;
              }
            }
          }
          appointment = new __Model.Appointment({
            enabled: true,
            apoName: appointmentAux.apoName,
            apoStartTime: appointmentAux.apoStartTime,
            apoCalendarId: appointmentAux.apoCalendarId,
            apoCalendarName: appointmentAux.apoCalendarName,
            apoX: (top_hour * margin_top_row) + margin_top_first,
            apoY: (num_apo * margin_left_row) + margin_left_first,
            bgColor: bgColor
          });
          if (bgColor > 0) {
            view = new __View.BookingDaySPView({
              model: appointment
            });
          } else {
            view = new __View.BookingDayView({
              model: appointment
            });
          }
          results.push(view.append(appointment));
        }
        return results;
      } else {
        if (!adminOption) {
          return Lungo.Notification.success(findLangTextElement("label.notification.notavailable.title"), findLangTextElement("label.notification.notavailable.text"), null, 5, function(response) {
            return __FacadeCore.Router_article("taskSelect", "task-form");
          });
        } else {
          Lungo.Notification.success(findLangTextElement("label.notification.notavailableAdmin.title"), findLangTextElement("label.notification.notavailableAdmin.text"), null, 5);
          a = data.selectedDate.split('-');
          newDayAux = new Date(a[0], a[1] - 1, a[2]);
          todayAux = new Date();
          newDayAux.setHours(todayAux.getHours() - (todayAux.getTimezoneOffset() / 60));
          newDayAux.setMinutes(todayAux.getMinutes());
          appointment = new __Model.Appointment({
            enabled: true,
            apoStartTime: newDayAux
          });
          __FacadeCore.Cache_remove(appName + "newApo");
          __FacadeCore.Cache_set(appName + "newApo", appointment);
          return __FacadeCore.Router_section("#newEvent");
        }
      }
    };

    BookingCtrl.prototype.onToday = function(event) {
      var newDayAux, selectedDate;
      if (this.tableDay.hasClass("active")) {
        newDayAux = new Date();
        selectedDate = dateToString(newDayAux);
        __FacadeCore.Cache_remove(appName + "selectedDate");
        __FacadeCore.Cache_set(appName + "selectedDate", selectedDate);
        return this.loadCalendarDay(event);
      }
    };

    BookingCtrl.prototype.onPreviusDay = function(event) {
      if (!this.previusDay.hasClass("not_enabled")) {
        return this.changeDay(event, -1);
      }
    };

    BookingCtrl.prototype.onNextDay = function(event) {
      if (!this.nextDay.hasClass("not_enabled")) {
        return this.changeDay(event, 1);
      }
    };

    BookingCtrl.prototype.changeDay = function(event, delta) {
      var a, newDayAux, oneDay, selectedDate;
      selectedDate = __FacadeCore.Cache_get(appName + "selectedDate");
      a = selectedDate.split('-');
      newDayAux = new Date(a[0], a[1] - 1, a[2]);
      oneDay = 1000 * 60 * 60 * 24;
      newDayAux.setTime(newDayAux.getTime() + (delta * oneDay));
      selectedDate = dateToString(newDayAux);
      __FacadeCore.Cache_remove(appName + "selectedDate");
      __FacadeCore.Cache_set(appName + "selectedDate", selectedDate);
      return this.loadCalendarDay(event);
    };

    return BookingCtrl;

  })(Monocle.Controller);

  __Controller.Booking = new BookingCtrl("section#booking");

}).call(this);
