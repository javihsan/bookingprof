// Generated by CoffeeScript 1.12.7
(function() {
  var ClientListCtrl,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  ClientListCtrl = (function(superClass) {
    var keywordType;

    extend(ClientListCtrl, superClass);

    function ClientListCtrl() {
      return ClientListCtrl.__super__.constructor.apply(this, arguments);
    }

    ClientListCtrl.prototype.result = {};

    keywordType = null;

    ClientListCtrl.prototype.events = {
      "load article#list-clients": "loadClientList",
      "unload article#list-clients": "onUnload",
      "keyup article#list-clients #keyword-type": "onKeyWordType"
    };

    ClientListCtrl.prototype.elements = {
      "header a[href=\\#]": "header",
      "footer a": "footer"
    };

    ClientListCtrl.prototype.onKeyWordType = function(event) {
      return this.showListClients();
    };

    ClientListCtrl.prototype.loadClientList = function(event) {
      var clients;
      this.header.hide();
      this.footer.hide();
      Lungo.Element.loading("#list-clients ul", "black");
      clients = __FacadeCore.Cache_get(appName + "clients");
      return this.showClientList(clients);
    };

    ClientListCtrl.prototype.showClientList = function(response) {
      var clientSearch;
      if (response.length > 0) {
        this.result = Lungo.Core.toArray(response);
        this.result = Lungo.Core.orderByProperty(this.result, "whoName", "asc");
        return this.showListClients();
      } else {
        clientSearch = Lungo.dom("#list-clients ul");
        this.cleanList(clientSearch);
        return Lungo.Notification.success(findLangTextElement("label.notification.noData.title"), findLangTextElement("label.notification.noData.text"), null, 3, function(response) {
          return __FacadeCore.Router_article("booking", "table-month");
        });
      }
    };

    ClientListCtrl.prototype.showListClients = function() {
      var client, clientAux, clientSearch, i, len, local, ref, results, texts, valSearch, view;
      clientSearch = Lungo.dom("#list-clients ul");
      this.cleanList(clientSearch);
      if (!keywordType) {
        texts = {
          search: findLangTextElement("form.search")
        };
        view = new __View.SearchListView;
        view.append(texts);
        keywordType = Lungo.dom("article#list-clients input#keyword-type");
      }
      valSearch = keywordType.val().toString().toLowerCase();
      local = __FacadeCore.Cache_get(appName + "local");
      if (valSearch !== "" || local.locNewClientDefault === 1) {
        ref = this.result;
        results = [];
        for (i = 0, len = ref.length; i < len; i++) {
          clientAux = ref[i];
          if (clientAux.whoName.toLowerCase().indexOf(valSearch) !== -1) {
            client = new __Model.Client({
              enabled: true,
              cliId: clientAux.id,
              cliName: clientAux.whoName,
              cliSurname: clientAux.whoSurname,
              cliEmail: clientAux.whoEmail,
              cliGender: clientAux.whoGender,
              cliBirthday: clientAux.whoBirthday,
              cliTelf1: clientAux.whoTelf1,
              cliTelf2: clientAux.whoTelf2,
              cliDesc: clientAux.whoDesc
            });
            view = new __View.ClientListView({
              model: client
            });
            results.push(view.append(client));
          } else {
            results.push(void 0);
          }
        }
        return results;
      }
    };

    ClientListCtrl.prototype.resetArticle = function() {
      if (keywordType) {
        keywordType.val("");
      }
      return keywordType = null;
    };

    ClientListCtrl.prototype.onUnload = function(event) {
      this.resetArticle();
      return __FacadeCore.Cache_remove(appName + "selectClient");
    };

    ClientListCtrl.prototype.cleanList = function(obj) {
      var i, len, objChildren, ref, results;
      ref = obj.children();
      results = [];
      for (i = 0, len = ref.length; i < len; i++) {
        objChildren = ref[i];
        if (!$$(objChildren).hasClass("dark")) {
          results.push($$(objChildren).remove());
        } else {
          results.push(void 0);
        }
      }
      return results;
    };

    return ClientListCtrl;

  })(Monocle.Controller);

  __Controller.ClientList = new ClientListCtrl("section#booking");

}).call(this);
