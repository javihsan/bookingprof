// Generated by CoffeeScript 1.12.7
(function() {
  var TaskSelectCtrl,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  TaskSelectCtrl = (function(superClass) {
    var antNumPersonsVal;

    extend(TaskSelectCtrl, superClass);

    function TaskSelectCtrl() {
      return TaskSelectCtrl.__super__.constructor.apply(this, arguments);
    }

    antNumPersonsVal = null;

    TaskSelectCtrl.prototype.events = {
      "load article#task-form": "onLoad",
      "singleTap button[data-action=save]": "onSave",
      "singleTap button[data-action=cancel]": "onCancel",
      "change #numPersons": "changeNumPersons",
      "change select[data-id=taskSelect]": "changeTaskSelect",
      "change input[data-id=taskGoodsSelect]": "changeTaskGoodsSelect",
      "change #task-form #calendarId": "changeCalendarSelect"
    };

    TaskSelectCtrl.prototype.elements = {
      "#task-form": "listArt",
      "#numPersons": "numPersons"
    };

    TaskSelectCtrl.prototype.changeTaskSelect = function(event) {
      var option, selectedTasksPer, taskNumPerson, taskSelPer, tasksSelect;
      option = event.currentTarget.options[event.currentTarget.selectedIndex];
      tasksSelect = $$(event.currentTarget);
      taskNumPerson = tasksSelect.attr("data-numPerson");
      taskSelPer = {
        id: parseInt(option.value),
        tasName: option.text
      };
      selectedTasksPer = new Array();
      selectedTasksPer[0] = taskSelPer;
      __FacadeCore.Cache_remove(appName + "selectedTasksPer" + taskNumPerson);
      __FacadeCore.Cache_set(appName + "selectedTasksPer" + taskNumPerson, selectedTasksPer);
      if (local.locSelCalendar === 1) {
        return this.fillSelCalendar();
      }
    };

    TaskSelectCtrl.prototype.changeCalendarSelect = function(event) {
      var calendarSel, option, selectedCalendars;
      option = event.currentTarget.options[event.currentTarget.selectedIndex];
      if (event.currentTarget.selectedIndex > 0) {
        selectedCalendars = new Array();
        calendarSel = {
          id: option.value,
          name: option.text
        };
        selectedCalendars[0] = calendarSel;
        __FacadeCore.Cache_remove(appName + "selectedCalendars");
        return __FacadeCore.Cache_set(appName + "selectedCalendars", selectedCalendars);
      } else {
        return __FacadeCore.Cache_remove(appName + "selectedCalendars");
      }
    };

    TaskSelectCtrl.prototype.showTasks = function(event) {
      var combiTasks, h, i, j, k, l, len, local, ref, ref1, selectedTasksPer, strTask, tasMultiple, tasSelName, task, taskOption, taskSel, tasksSelect, textsTemplates, view;
      local = __FacadeCore.Cache_get(appName + "local");
      textsTemplates = {
        jobForPerson: findLangTextElement("label.template.job"),
        changePush: findLangTextElement("label.html.apoFor3")
      };
      combiTasks = __FacadeCore.Cache_get(appName + "combiTasks");
      for (h = j = 0, ref = this.numPersons.val() - 1; 0 <= ref ? j <= ref : j >= ref; h = 0 <= ref ? ++j : --j) {
        tasSelName = findLangTextElement("label.template.jobForPerson") + " " + this.numPersons[0].options[h].text;
        if (local.locNumPersonsApo === 1) {
          tasSelName = "";
        }
        tasMultiple = true;
        if (local.locMulServices === 0) {
          tasMultiple = false;
        }
        taskSel = new __Model.TaskSel({
          enabled: true,
          tasSelId: this.numPersons[0].options[h].value,
          tasSelName: tasSelName,
          tasMultiple: tasMultiple,
          texts: textsTemplates
        });
        view = new __View.TaskSelectView({
          model: taskSel
        });
        view.append(taskSel);
        selectedTasksPer = __FacadeCore.Cache_get(appName + "selectedTasksPer" + (h + 1));
        if (tasMultiple) {
          strTask = "";
          for (i = k = 0, ref1 = selectedTasksPer.length - 1; 0 <= ref1 ? k <= ref1 : k >= ref1; i = 0 <= ref1 ? ++k : --k) {
            if (i > 0) {
              strTask += " , ";
            }
            strTask += selectedTasksPer[i].tasName;
          }
          tasksSelect = Lungo.dom("article#task-form #task_" + taskSel.tasSelId);
          tasksSelect.html(strTask);
        } else {
          tasksSelect = Lungo.dom("article#task-form #task_" + taskSel.tasSelId);
          i = -1;
          taskOption = 0;
          for (l = 0, len = combiTasks.length; l < len; l++) {
            task = combiTasks[l];
            i++;
            tasksSelect[0].options[i] = new Option(task.lotName, task.id);
            if (selectedTasksPer[0].id.toString() === task.id.toString()) {
              tasksSelect[0].options.selectedIndex = i;
            }
          }
        }
      }
      if (local.locSelCalendar === 1) {
        textsTemplates = {
          selectCalendar: findLangTextElement("place.select.cabText")
        };
        view = new __View.TaskSelectCalendarView({
          model: textsTemplates
        });
        view.append(textsTemplates);
        this.fillSelCalendar();
      } else {
        __FacadeCore.Cache_remove(appName + "selectedCalendars");
      }
      textsTemplates = {
        ok: findLangTextElement("event.searchHours"),
        cancel: findLangTextElement("form.cancel")
      };
      view = new __View.TaskSelectButtonView({
        model: textsTemplates
      });
      return view.append(textsTemplates);
    };

    TaskSelectCtrl.prototype.fillSelCalendar = function() {
      var asyn, calendar, calendarSel, calendars, data, h, i, j, k, l, len, len1, local, objCalendarSel, ref, selOption, selectTaskParam, selectedCalendars, selectedTasksPer, taskSel, url;
      asyn = __FacadeCore.Service_Settings_asyncFalse();
      url = "http://" + appHost + "/calendar/listCandidate";
      local = __FacadeCore.Cache_get(appName + "local");
      selectTaskParam = new Array();
      i = 0;
      for (h = j = 0, ref = antNumPersonsVal - 1; 0 <= ref ? j <= ref : j >= ref; h = 0 <= ref ? ++j : --j) {
        selectedTasksPer = __FacadeCore.Cache_get(appName + "selectedTasksPer" + (h + 1));
        for (k = 0, len = selectedTasksPer.length; k < len; k++) {
          taskSel = selectedTasksPer[k];
          if (selectTaskParam.indexOf(taskSel.id) === -1) {
            selectTaskParam[i] = taskSel.id;
            i++;
          }
        }
      }
      data = {
        localId: local.id,
        selectedTasks: selectTaskParam
      };
      calendars = $$.json(url, data);
      calendars = Lungo.Core.orderByProperty(calendars, "calName", "asc");
      __FacadeCore.Service_Settings_async(asyn);
      objCalendarSel = Lungo.dom("#task-form #calendarId");
      objCalendarSel.empty();
      objCalendarSel[0].options[0] = new Option(findLangTextElement("general.anyone"), 0);
      selectedCalendars = __FacadeCore.Cache_get(appName + "selectedCalendars");
      i = 0;
      selOption = 0;
      for (l = 0, len1 = calendars.length; l < len1; l++) {
        calendar = calendars[l];
        i++;
        objCalendarSel[0].options[i] = new Option(calendar.calName, calendar.id);
        if (selectedCalendars && selectedCalendars[0].id.toString() === calendar.id.toString()) {
          selOption = i;
        } else if (selOption === 0 && calendar.calName.toLowerCase().indexOf("pere") !== -1) {
          selOption = i;
          selectedCalendars = new Array();
          calendarSel = {
            id: calendar.id,
            name: calendar.calName
          };
          selectedCalendars[0] = calendarSel;
          __FacadeCore.Cache_remove(appName + "selectedCalendars");
          __FacadeCore.Cache_set(appName + "selectedCalendars", selectedCalendars);
        }
      }
      return objCalendarSel[0].options.selectedIndex = selOption;
    };

    TaskSelectCtrl.prototype.changeNumPersons = function(event) {
      var combiTasks, defaultTask, delLi, h, i, ind, j, k, l, local, ref, ref1, ref2, selectedTasks, selectedTasksCount, selectedTasksPer, taskSelPer;
      if (antNumPersonsVal) {
        delLi = Lungo.dom("article#task-form li:last-child");
        delLi.remove();
        delLi = Lungo.dom("article#task-form #selectCalendarLi");
        delLi.remove();
        for (h = j = 0, ref = antNumPersonsVal - 1; 0 <= ref ? j <= ref : j >= ref; h = 0 <= ref ? ++j : --j) {
          delLi = Lungo.dom("article#task-form li:last-child");
          delLi.remove();
        }
      }
      antNumPersonsVal = this.numPersons.val();
      __FacadeCore.Cache_remove(appName + "selectedTasksCountProv");
      __FacadeCore.Cache_set(appName + "selectedTasksCountProv", antNumPersonsVal);
      selectedTasks = __FacadeCore.Cache_get(appName + "selectedTasks");
      selectedTasksCount = __FacadeCore.Cache_get(appName + "selectedTasksCount");
      combiTasks = __FacadeCore.Cache_get(appName + "combiTasks");
      local = __FacadeCore.Cache_get(appName + "local");
      defaultTask = Lungo.Core.findByProperty(combiTasks, "id", local.locTaskDefaultId);
      taskSelPer = {
        id: defaultTask.id,
        tasName: defaultTask.lotName
      };
      if (appFirmDomain === 'adveo') {
        taskSelPer.numLines = 1;
        taskSelPer.numPallets = 1;
      }
      ind = 0;
      for (h = k = 0, ref1 = this.numPersons.val() - 1; 0 <= ref1 ? k <= ref1 : k >= ref1; h = 0 <= ref1 ? ++k : --k) {
        selectedTasksPer = __FacadeCore.Cache_get(appName + "selectedTasksPer" + (h + 1));
        if (!selectedTasksPer) {
          if (selectedTasksCount && selectedTasksCount[h]) {
            selectedTasksPer = new Array();
            for (i = l = 0, ref2 = selectedTasksCount[h] - 1; 0 <= ref2 ? l <= ref2 : l >= ref2; i = 0 <= ref2 ? ++l : --l) {
              selectedTasksPer[i] = selectedTasks[ind];
              i++;
              ind++;
            }
          } else {
            selectedTasksPer = new Array();
            selectedTasksPer[0] = taskSelPer;
          }
          __FacadeCore.Cache_remove(appName + "selectedTasksPer" + (h + 1));
          __FacadeCore.Cache_set(appName + "selectedTasksPer" + (h + 1), selectedTasksPer);
        }
      }
      if (appFirmDomain === 'adveo') {
        return this.showTasksGoods(event);
      } else {
        return this.showTasks(event);
      }
    };

    TaskSelectCtrl.prototype.onLoad = function(event) {
      var i, j, local, ref, selectedTasksCount, selectedTasksCountProv;
      local = __FacadeCore.Cache_get(appName + "local");
      for (i = j = 1, ref = local.locNumPersonsApo; 1 <= ref ? j <= ref : j >= ref; i = 1 <= ref ? ++j : --j) {
        this.numPersons[0].options[i - 1] = new Option(i, i);
      }
      selectedTasksCountProv = __FacadeCore.Cache_get(appName + "selectedTasksCountProv");
      if (!selectedTasksCountProv) {
        selectedTasksCount = __FacadeCore.Cache_get(appName + "selectedTasksCount");
        if (selectedTasksCount) {
          selectedTasksCountProv = selectedTasksCount.length;
        }
      }
      if (selectedTasksCountProv) {
        this.numPersons[0].options.selectedIndex = selectedTasksCountProv - 1;
      } else {
        this.numPersons[0].options.selectedIndex = 0;
      }
      if (local.locNumPersonsApo === 1) {
        this.numPersons.parent().parent().hide();
        this.numPersons[0].options.selectedIndex = 0;
      }
      return this.changeNumPersons(event);
    };

    TaskSelectCtrl.prototype.onSave = function(event) {
      var h, i, j, k, l, len, ref, ref1, selectedTasks, selectedTasksCount, selectedTasksPer, taskSel;
      if (this.listArt.hasClass("active") && this.validateForm()) {
        selectedTasks = new Array();
        selectedTasksCount = new Array();
        i = 0;
        for (h = j = 0, ref = antNumPersonsVal - 1; 0 <= ref ? j <= ref : j >= ref; h = 0 <= ref ? ++j : --j) {
          selectedTasksPer = __FacadeCore.Cache_get(appName + "selectedTasksPer" + (h + 1));
          for (k = 0, len = selectedTasksPer.length; k < len; k++) {
            taskSel = selectedTasksPer[k];
            selectedTasks[i] = taskSel;
            i++;
          }
          selectedTasksCount[h] = selectedTasksPer.length;
        }
        __FacadeCore.Cache_remove(appName + "selectedTasks");
        __FacadeCore.Cache_set(appName + "selectedTasks", selectedTasks);
        __FacadeCore.Cache_remove(appName + "selectedTasksCount");
        __FacadeCore.Cache_set(appName + "selectedTasksCount", selectedTasksCount);
        for (i = l = 1, ref1 = local.locNumPersonsApo; 1 <= ref1 ? l <= ref1 : l >= ref1; i = 1 <= ref1 ? ++l : --l) {
          __FacadeCore.Cache_remove(appName + "selectedTasksPer" + i);
        }
        __FacadeCore.Cache_remove(appName + "selectedTasksCountProv");
        return __FacadeCore.Router_article("booking", "table-day");
      }
    };

    TaskSelectCtrl.prototype.onCancel = function(event) {
      var i, j, local, ref;
      if (this.listArt.hasClass("active")) {
        local = __FacadeCore.Cache_get(appName + "local");
        for (i = j = 1, ref = local.locNumPersonsApo; 1 <= ref ? j <= ref : j >= ref; i = 1 <= ref ? ++j : --j) {
          __FacadeCore.Cache_remove(appName + "selectedTasksPer" + i);
        }
        __FacadeCore.Cache_remove(appName + "selectedTasksCountProv");
        return __FacadeCore.Router_article("booking", "table-month");
      }
    };

    TaskSelectCtrl.prototype.showTasksGoods = function(event) {
      var selectedTasksPer, taskSel, taskSelPer, textsTemplates, view;
      selectedTasksPer = __FacadeCore.Cache_get(appName + "selectedTasksPer" + 1);
      taskSelPer = selectedTasksPer[0];
      textsTemplates = {
        numLines: findLangTextElement("label.template.selNumLines"),
        numPallets: findLangTextElement("label.template.selNumPallets")
      };
      taskSel = new __Model.TaskSel({
        enabled: true,
        tasGoodsNumLines: taskSelPer.numLines,
        tasGoodsNumPallets: taskSelPer.numPallets,
        texts: textsTemplates
      });
      view = new __View.TaskSelectGoodsView({
        model: taskSel
      });
      view.append(taskSel);
      textsTemplates = {
        ok: findLangTextElement("event.searchHours"),
        cancel: findLangTextElement("form.cancel")
      };
      view = new __View.TaskSelectButtonView({
        model: textsTemplates
      });
      return view.append(textsTemplates);
    };

    TaskSelectCtrl.prototype.changeTaskGoodsSelect = function(event) {
      var selectedTasksPer, taskSelPer, tasksSelect;
      tasksSelect = $$(event.currentTarget);
      selectedTasksPer = __FacadeCore.Cache_get(appName + "selectedTasksPer" + 1);
      taskSelPer = selectedTasksPer[0];
      if (event.currentTarget.checkValidity()) {
        eval("taskSelPer." + event.currentTarget.id + " = parseInt(tasksSelect.val())");
        selectedTasksPer = new Array();
        selectedTasksPer[0] = taskSelPer;
        __FacadeCore.Cache_remove(appName + "selectedTasksPer" + 1);
        return __FacadeCore.Cache_set(appName + "selectedTasksPer" + 1, selectedTasksPer);
      }
    };

    TaskSelectCtrl.prototype.validateForm = function() {
      var error_numLines, error_numPallets, numLinesSel, numPalletsSel, result;
      result = true;
      numLinesSel = $$("#numLines");
      error_numLines = $$("#error_numLines");
      error_numLines.html("");
      numPalletsSel = $$("#numPallets");
      error_numPallets = $$("#error_numPallets");
      error_numPallets.html("");
      if (numLinesSel[0] && !numLinesSel[0].checkValidity()) {
        error_numLines.html(getMessageValidity(numLinesSel[0]));
        numLinesSel[0].focus();
        result = false;
      } else if (numPalletsSel[0] && !numPalletsSel[0].checkValidity()) {
        error_numPallets.html(getMessageValidity(numPalletsSel[0]));
        numPalletsSel[0].focus();
        result = false;
      }
      return result;
    };

    return TaskSelectCtrl;

  })(Monocle.Controller);

  __Controller.TaskSelect = new TaskSelectCtrl("section#taskSelect");

}).call(this);
