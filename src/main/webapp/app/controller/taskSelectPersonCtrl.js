// Generated by CoffeeScript 1.12.7
(function() {
  var TaskSelectPersonCtrl,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  TaskSelectPersonCtrl = (function(superClass) {
    extend(TaskSelectPersonCtrl, superClass);

    function TaskSelectPersonCtrl() {
      return TaskSelectPersonCtrl.__super__.constructor.apply(this, arguments);
    }

    TaskSelectPersonCtrl.prototype.selectCount = 0;

    TaskSelectPersonCtrl.prototype.events = {
      "load #taskPerson-form": "loadLocalTaskPerson",
      "singleTap a[data-action=save]": "onSave",
      "singleTap a[data-action=cancel]": "onCancel",
      "singleTap a[data-action=reset]": "onReset"
    };

    TaskSelectPersonCtrl.prototype.elements = {
      "#taskPerson-form": "listArt",
      "a[data-action=save]": "buttonSave",
      "a[data-action=cancel]": "buttonCancel"
    };

    TaskSelectPersonCtrl.prototype.loadLocalTaskPerson = function(event) {
      var combiTasks, j, k, len, len1, localTask, localTaskAux, lotEnabled, selectedTasksPer, selectedTasksPerNum, tasSelName, taskSelPer, texts, view;
      Lungo.Element.loading("#taskPerson-form ul", "black");
      combiTasks = __FacadeCore.Cache_get(appName + "combiTasks");
      this.listArt.children().empty();
      selectedTasksPerNum = __FacadeCore.Cache_get(appName + "selectedTasksPerNum");
      selectedTasksPer = __FacadeCore.Cache_get(appName + "selectedTasksPer" + selectedTasksPerNum);
      tasSelName = findLangTextElement("label.template.job");
      if (local.locNumPersonsApo > 1) {
        tasSelName += " " + findLangTextElement("label.template.jobForPerson") + " " + selectedTasksPerNum;
      }
      texts = {
        cabText: tasSelName
      };
      view = new __View.ListCabView({
        model: texts,
        container: "section#taskSelect article#taskPerson-form ul"
      });
      view.append(texts);
      this.selectCount = 0;
      for (j = 0, len = combiTasks.length; j < len; j++) {
        localTaskAux = combiTasks[j];
        lotEnabled = false;
        for (k = 0, len1 = selectedTasksPer.length; k < len1; k++) {
          taskSelPer = selectedTasksPer[k];
          if (taskSelPer.id === localTaskAux.id) {
            lotEnabled = true;
            this.selectCount++;
            break;
          }
        }
        localTask = new __Model.LocalTask({
          enabled: lotEnabled,
          lotId: localTaskAux.id,
          lotTaskDuration: localTaskAux.lotTaskDuration,
          lotName: localTaskAux.lotName
        });
        view = new __View.LocalTaskPersonView({
          model: localTask
        });
        view.append(localTask);
      }
      return FacadeCore.prototype.count("a[data-action=reset]", this.selectCount);
    };

    TaskSelectPersonCtrl.prototype.onSave = function(event) {
      var _this, c, combiTasks, duplicate, duplicateText, h, i, j, k, len, liLocalTask, listLocalTask, ref, ref1, selectedTasksPer, selectedTasksPerId, selectedTasksPerNum, taskAux, taskAuxCombi, taskSelPer;
      if (this.listArt.hasClass("active")) {
        combiTasks = __FacadeCore.Cache_get(appName + "combiTasks");
        listLocalTask = $$("#taskPerson-form ul li");
        selectedTasksPer = new Array();
        selectedTasksPerId = new Array();
        i = -1;
        c = 0;
        for (h = j = 0, ref = listLocalTask.length - 1; 0 <= ref ? j <= ref : j >= ref; h = 0 <= ref ? ++j : --j) {
          liLocalTask = $$(listLocalTask[h]);
          if (liLocalTask.hasClass("accept")) {
            i++;
            taskSelPer = {
              id: parseInt(liLocalTask.attr("lotId")),
              tasName: liLocalTask.attr("lotName")
            };
            selectedTasksPer[i] = taskSelPer;
            taskAux = Lungo.Core.findByProperty(combiTasks, "id", taskSelPer.id);
            if (taskAux.lotTaskCombiId && taskAux.lotTaskCombiId.length > 0) {
              ref1 = taskAux.lotTaskCombiId;
              for (k = 0, len = ref1.length; k < len; k++) {
                taskAuxCombi = ref1[k];
                selectedTasksPerId[c] = taskAuxCombi;
                c++;
              }
            } else {
              selectedTasksPerId[c] = taskSelPer.id;
              c++;
            }
          }
        }
        if (selectedTasksPer.length > 0) {
          duplicate = arrHasDupes(selectedTasksPerId);
          if (duplicate) {
            duplicateText = (Lungo.Core.findByProperty(combiTasks, "id", duplicate)).lotName;
            _this = this;
            return Lungo.Notification.error(findLangTextElement("label.notification.localTaskCombiDiferent.title"), findLangTextElement("label.notification.localTaskCombiDiferent.text") + " " + duplicateText + " " + findLangTextElement("label.notification.localTaskCombiDiferent.text2"), null, 3);
          } else {
            __FacadeCore.Cache_remove(appName + "elementSave");
            __FacadeCore.Cache_remove(appName + "elementCancel");
            __FacadeCore.Cache_set(appName + "elementSave", this.buttonSave.html());
            __FacadeCore.Cache_set(appName + "elementCancel", this.buttonCancel.html());
            Lungo.Element.loading(this.buttonSave.selector, "black");
            Lungo.Element.loading(this.buttonCancel.selector, "black");
            selectedTasksPerNum = __FacadeCore.Cache_get(appName + "selectedTasksPerNum");
            __FacadeCore.Cache_remove(appName + "selectedTasksPer" + selectedTasksPerNum);
            __FacadeCore.Cache_set(appName + "selectedTasksPer" + selectedTasksPerNum, selectedTasksPer);
            __FacadeCore.Router_article("taskSelect", "task-form");
            return this.resetArticle();
          }
        } else {
          return Lungo.Notification.error(findLangTextElement("label.notification.localTaskSelectOne.title"), findLangTextElement("label.notification.localTaskSelectOne.text"), null, 2);
        }
      }
    };

    TaskSelectPersonCtrl.prototype.onReset = function(event) {
      var h, j, liLocalTask, listLocalTask, ref;
      listLocalTask = $$("#taskPerson-form ul li");
      for (h = j = 0, ref = listLocalTask.length - 1; 0 <= ref ? j <= ref : j >= ref; h = 0 <= ref ? ++j : --j) {
        liLocalTask = $$(listLocalTask[h]);
        if (!liLocalTask.hasClass("cancel")) {
          liLocalTask.removeClass("accept");
          liLocalTask.removeClass("theme");
          liLocalTask.addClass("cancel");
        }
      }
      this.selectCount = 0;
      return FacadeCore.prototype.count("a[data-action=reset]", this.selectCount);
    };

    TaskSelectPersonCtrl.prototype.onCancel = function(event) {
      if (this.listArt.hasClass("active")) {
        __FacadeCore.Cache_remove(appName + "elementSave");
        __FacadeCore.Cache_remove(appName + "elementCancel");
        __FacadeCore.Cache_set(appName + "elementSave", this.buttonSave.html());
        __FacadeCore.Cache_set(appName + "elementCancel", this.buttonCancel.html());
        Lungo.Element.loading(this.buttonSave.selector, "black");
        Lungo.Element.loading(this.buttonCancel.selector, "black");
        __FacadeCore.Router_article("taskSelect", "task-form");
        return this.resetArticle();
      }
    };

    TaskSelectPersonCtrl.prototype.resetArticle = function() {
      this.buttonSave.html(__FacadeCore.Cache_get(appName + "elementSave"));
      this.buttonCancel.html(__FacadeCore.Cache_get(appName + "elementCancel"));
      return __FacadeCore.Cache_remove(appName + "selectedTasksPerNum");
    };

    return TaskSelectPersonCtrl;

  })(Monocle.Controller);

  __Controller.TaskSelectPerson = new TaskSelectPersonCtrl("section#taskSelectPerson");

}).call(this);
