// Generated by CoffeeScript 1.12.7
(function() {
  var extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  __View.LocalTaskListView = (function(superClass) {
    extend(LocalTaskListView, superClass);

    function LocalTaskListView() {
      return LocalTaskListView.__super__.constructor.apply(this, arguments);
    }

    LocalTaskListView.prototype.container = "section#booking article#local-tasks ul";

    LocalTaskListView.prototype.template_url = "/app/templates/localTaskList.mustache";

    LocalTaskListView.prototype.events = {
      "singleTap li": "loadLocalTask",
      "doubleTap li": "defaultLocalTask",
      "swiping li": "onSwiping"
    };

    LocalTaskListView.prototype.loadLocalTask = function(event) {
      if (__FacadeCore.isSwipeLeft(event, true)) {
        return this.onRemove(event);
      } else {
        __FacadeCore.Cache_remove(appName + "localTaskNew");
        __FacadeCore.Cache_set(appName + "localTaskNew", this.model);
        if (this.model.lotTaskCombiRes && this.model.lotTaskCombiRes.length > 0) {
          return __FacadeCore.Router_article("newLocalTask", "localTaskCombi-form");
        } else {
          return __FacadeCore.Router_article("newLocalTask", "localTask-form");
        }
      }
    };

    LocalTaskListView.prototype.onSwiping = function(event) {
      event.preventDefault();
      if (__FacadeCore.isSwipeLeft(event)) {
        return this.onRemove(event);
      }
    };

    LocalTaskListView.prototype.onRemove = function(event) {
      var _this, dataAccept, dataCancel, dataConfirm;
      if (!this.model.lotDefault) {
        _this = this;
        dataAccept = {
          icon: 'checkmark',
          label: 'Accept',
          callback: function() {
            return _this.removeConfirm(event);
          }
        };
        dataCancel = {
          icon: 'checkmark',
          label: 'Cancel',
          callback: function() {
            return {};
          }
        };
        dataConfirm = {
          icon: 'user',
          title: findLangTextElement("label.notification.deleteLocalTask.title"),
          description: findLangTextElement("label.notification.deleteLocalTask.text"),
          accept: dataAccept,
          cancel: dataCancel
        };
        return Lungo.Notification.confirm(dataConfirm);
      }
    };

    LocalTaskListView.prototype.removeConfirm = function(event) {
      var _this, data, url;
      url = "http://" + appHost + "/localTask/manager/remove";
      data = {
        localId: this.model.lotLocalId,
        id: this.model.lotId
      };
      _this = this;
      return $$.put(url, data, function() {
        Lungo.Notification.success(findLangTextElement("label.notification.deletedLocalTask.title"), findLangTextElement("label.notification.deletedLocalTask.text"), null, 3);
        return _this.remove();
      });
    };

    LocalTaskListView.prototype.defaultLocalTask = function(event) {
      var _this, data, url;
      if (__FacadeCore.isDoubleTap(event)) {
        if (!this.model.lotDefault && (this.model.lotTaskDuration > 0 || (this.model.lotTaskCombiId && this.model.lotTaskCombiId.length > 0))) {
          url = "http://" + appHost + "/local/manager/defaultLocalTask";
          data = {
            localId: this.model.lotLocalId,
            idLocalTask: this.model.lotId
          };
          _this = this.model;
          return $$.put(url, data, function() {
            var local;
            local = __FacadeCore.Cache_get(appName + "local");
            local.locTaskDefaultId = _this.lotId;
            __FacadeCore.Cache_remove(appName + "local");
            __FacadeCore.Cache_set(appName + "local", local);
            return __Controller.LocalTaskList.loadListLocalTask(event);
          });
        }
      }
    };

    return LocalTaskListView;

  })(Monocle.View);

}).call(this);
