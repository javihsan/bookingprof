// Generated by CoffeeScript 1.12.7
(function() {
  var extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  __View.EventListView = (function(superClass) {
    extend(EventListView, superClass);

    function EventListView() {
      return EventListView.__super__.constructor.apply(this, arguments);
    }

    EventListView.prototype.container = "section#booking article#list-events ul";

    EventListView.prototype.template_url = "/app/templates/eventsList.mustache";

    EventListView.prototype.elements = {
      "div:first-child": "divConsumed"
    };

    EventListView.prototype.events = {
      "singleTap li": "loadClient",
      "doubleTap li": "consumEvent",
      "swiping li": "onSwiping"
    };

    EventListView.prototype.loadClient = function(event) {
      var client;
      if (__FacadeCore.isSwipeLeft(event, true)) {
        return this.removeEvent(event);
      } else {
        __FacadeCore.Cache_remove(appName + "client");
        client = new __Model.Client({
          enabled: true,
          cliId: this.model.eveClient.id,
          cliName: this.model.eveClient.whoName,
          cliSurname: this.model.eveClient.whoSurname,
          cliEmail: this.model.eveClient.whoEmail,
          cliGender: this.model.eveClient.whoGender,
          cliBirthday: this.model.eveClient.whoBirthday,
          cliTelf1: this.model.eveClient.whoTelf1,
          cliTelf2: this.model.eveClient.whoTelf2,
          cliDesc: this.model.eveClient.whoDesc,
          router: "list-events"
        });
        __FacadeCore.Cache_set(appName + "client", client);
        return __FacadeCore.Router_section("newClient");
      }
    };

    EventListView.prototype.onSwiping = function(event) {
      event.preventDefault();
      if (__FacadeCore.isSwipeLeft(event)) {
        return this.removeEvent(event);
      }
    };

    EventListView.prototype.removeEvent = function(event) {
      __FacadeCore.Cache_remove(appName + "eventCancel");
      __FacadeCore.Cache_set(appName + "eventCancel", this.model);
      return __FacadeCore.Router_section("cancelEvent");
    };

    EventListView.prototype.consumEvent = function(event) {
      var _this, dataAccept, dataCancel, dataConfirm, firm;
      if (__FacadeCore.isDoubleTap(event)) {
        if (appFirmDomain === 'adveo') {
          if (!this.model.eveConsumed && !this.model.eveRejected) {
            __FacadeCore.Cache_remove(appName + "eventFin");
            __FacadeCore.Cache_set(appName + "eventFin", this.model);
            return __FacadeCore.Router_section("finEvent");
          } else {
            _this = this;
            dataAccept = {
              icon: 'checkmark',
              label: 'Accept',
              callback: function() {
                return _this.consumEventConfirm(event);
              }
            };
            dataCancel = {
              icon: 'checkmark',
              label: 'Cancel',
              callback: function() {
                return {};
              }
            };
            dataConfirm = {
              icon: 'user',
              title: findLangTextElement("label.notification.openApo.title"),
              description: findLangTextElement("label.notification.openApo.text"),
              accept: dataAccept,
              cancel: dataCancel
            };
            return Lungo.Notification.confirm(dataConfirm);
          }
        } else {
          firm = __FacadeCore.Cache_get(appName + "firm");
          if (firm.firBilledModule === 1) {
            if (!this.model.eveConsumed) {
              __FacadeCore.Cache_remove(appName + "eventFin");
              __FacadeCore.Cache_set(appName + "eventFin", this.model);
              return __FacadeCore.Router_section("newInvoice");
            }
          } else {
            _this = this;
            dataAccept = {
              icon: 'checkmark',
              label: 'Accept',
              callback: function() {
                return _this.consumEventConfirm(event);
              }
            };
            dataCancel = {
              icon: 'checkmark',
              label: 'Cancel',
              callback: function() {
                return {};
              }
            };
            if (!this.model.eveConsumed) {
              dataConfirm = {
                icon: 'user',
                title: findLangTextElement("label.notification.closeApo.title"),
                description: findLangTextElement("label.notification.closeApo.text"),
                accept: dataAccept,
                cancel: dataCancel
              };
            } else {
              dataConfirm = {
                icon: 'user',
                title: findLangTextElement("label.notification.openApo.title"),
                description: findLangTextElement("label.notification.openApo.text"),
                accept: dataAccept,
                cancel: dataCancel
              };
            }
            return Lungo.Notification.confirm(dataConfirm);
          }
        }
      }
    };

    EventListView.prototype.consumEventConfirm = function(event) {
      var _this, data, url;
      if (appFirmDomain === 'adveo') {
        url = "http://" + appHost + "/event/operator/consumeComent";
        data = {
          ICS: this.model.eveICS,
          sel: -1,
          text: ''
        };
      } else {
        url = "http://" + appHost + "/event/operator/consume";
        data = {
          ICS: this.model.eveICS
        };
      }
      _this = this;
      return $$.put(url, data, function(response) {
        return _this.showConsumEvent(response);
      });
    };

    EventListView.prototype.showConsumEvent = function(response) {
      var consumed;
      consumed = false;
      if (response > 0) {
        consumed = true;
      }
      __Controller.EventList.setResult(null);
      return __Controller.EventList.loadListEvents();
    };

    return EventListView;

  })(Monocle.View);

}).call(this);
