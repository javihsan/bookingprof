// Generated by CoffeeScript 1.12.7
(function() {
  var extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  __View.CalendarListView = (function(superClass) {
    extend(CalendarListView, superClass);

    function CalendarListView() {
      return CalendarListView.__super__.constructor.apply(this, arguments);
    }

    CalendarListView.prototype.container = "section#booking article#list-calendar ul";

    CalendarListView.prototype.template_url = "/app/templates/calendarList.mustache";

    CalendarListView.prototype.events = {
      "singleTap li": "onSelect",
      "doubleTap li": "onEnabled"
    };

    CalendarListView.prototype.onSelect = function(event) {
      if (this.model.enabled) {
        __FacadeCore.Cache_remove(appName + "calendar");
        __FacadeCore.Cache_set(appName + "calendar", this.model);
        return __FacadeCore.Router_section("newCalendar");
      }
    };

    CalendarListView.prototype.onEnabled = function(event) {
      var _this, dataAccept, dataCancel, dataConfirm;
      if (__FacadeCore.isDoubleTap(event)) {
        _this = this;
        dataAccept = {
          icon: 'checkmark',
          label: 'Accept',
          callback: function() {
            return _this.onEnabledConfirm(event);
          }
        };
        dataCancel = {
          icon: 'checkmark',
          label: 'Cancel',
          callback: function() {
            return {};
          }
        };
        dataConfirm = {
          icon: 'user',
          title: findLangTextElement("label.notification.placeEnabled.title"),
          description: findLangTextElement("label.notification.placeEnabled.text"),
          accept: dataAccept,
          cancel: dataCancel
        };
        return Lungo.Notification.confirm(dataConfirm);
      }
    };

    CalendarListView.prototype.onEnabledConfirm = function(event) {
      var data, url;
      url = "http://" + appHost + "/calendar/manager/enabled";
      data = {
        id: this.model.calId
      };
      return $$.put(url, data, function() {
        return __Controller.CalendarList.loadCalendar(event);
      });
    };

    return CalendarListView;

  })(Monocle.View);

}).call(this);
