package com.diloso.bookhair.app.datastore.data;

import java.util.Collection;
import java.util.List;
import java.util.Map;

import com.google.appengine.api.datastore.Cursor;

/**
 * Service with basic CRUD operations for a given type
 *
 * @author Alejandro Aranda
 * @param <I>
 *            ids
 * @param <T>
 *            storable object
 */
public interface ICRUDService<I, T extends IStorable<I>> {

    /**
     * Creates an object
     *
     * @param object
     * @return object created
     */
    T create(T object);

    /**
     * Creates all objects
     *
     * @param objects
     * @return objects created
     */
    List<T> createAll(List<T> objects);

    /**
     * Deletes an object given its id
     *
     * @param id
     *
     */
    void delete(final I id);

    /**
     * Deletes list of objects of type
     */
    void deleteAll(List<T> objects);

    /**
     * Deletes all objects of type
     */
    void deleteAll();



    /**
     * Deletes a list of objects given its id
     *
     * @param ids
     *
     */
    void delete(final List<I> ids);



    /**
     * List all objects of given type
     *
     * @return list of objects
     */
    List<T> list();

    /**
     * List all objects of given type with ordering
     *
     * @param orders
     * @return list of objects
     */
    List<T> listOrder(List<String> orders);

    /**
     * List objects of given type with given filter
     *
     * @param filters
     * @return list of objects
     */
    List<T> listFilter(Map<String, Object> filters);

    /**
     * Listado con filtros del contenido de la entidad con ordenaci√≥n
     *
     * @param filters
     * @param orders
     *            : Recibimos una lista con ordenaciones con formato "-nomCpo"
     *            para orden descendente y "nomCpo" para orden ascendente
     *
     * @return
     */
    List<T> listOrderFilter(Map<String, Object> filters,
            List<String> orders);

    /**
     * Returns a page with objects
     *
     * @param from
     *            or null for first page
     * @param itemsPerPage
     * @return
     */
    PageBean page(String from, int itemsPerPage);

    /**
     * Returns a page with objects and given ordering
     *
     * @param from
     *            or null for first page
     * @param itemsPerPage
     * @param orders
     * @return
     */
    PageBean pagedOrder(String from, int itemsPerPage,
            List<String> orders);

    /**
     * Returns a page with objects with given filters
     *
     * @param from
     *            or null for first page
     * @param itemsPerPage
     * @param filters
     * @return
     */
    PageBean pagedFilter(String from, int itemsPerPage,
            Map<String, Object> filters);

    public PageKeyBean<T> pagedOnlyKeys(Cursor cursor, int itemsPerPage, Map<String, Object> filters, List<String> orders);

    /**
     * Returns an object given its id
     *
     * @param id
     * @return object or null if not found
     */
    T get(I id);

    /**
     * Updates information of given object
     *
     * @param object
     * @return updated object
     */
    T update(T object);

    /**
     * Updates information of given list of objects
     *
     * @param objects
     * @return updated objects
     */
    List<T> updateAll(List<T> object);

    /**
     * @return true if ids are autogenerated
     */
    boolean isAutogenerateIds();

    /**
     * @param id
     * @return true if id is null (or equivalent to null)
     */
    boolean isNullId(I id);

    /**
     * @param name
     * @param value
     * @return value transformed in object
     */
    Object formatForFilter(String name, String value);

    /**
     *
     * @param filters
     * @return
     */
    int count( Map<String, Object> filters);
    int count();

    /**
     * @param ids
     * @return objects of given ids
     */
    Map<I, T> getByList(Collection<I> ids);

    PageBean pagedOrderFilter(String from, int itemsPerPage,
            Map<String, Object> filters, List<String> orders);

    /**
     * Clear Objectify cache, not memcache
     */
    void clearCache();
}
